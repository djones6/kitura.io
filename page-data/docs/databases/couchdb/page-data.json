{"componentChunkName":"component---src-templates-docs-js","path":"/docs/databases/couchdb","webpackCompilationHash":"a23aaa782308d970cae7","result":{"data":{"docs":{"html":"<h1 id=\"kitura-couchdb\"><a href=\"#kitura-couchdb\" aria-label=\"kitura couchdb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura CouchDB</h1>\n<p>CouchDB is a NoSQL (or non-relational) database which takes a document-oriented approach to data storage.</p>\n<p>Kitura-CouchDB is a pure Swift client which allows Kitura applications to interact with a CouchDB or Cloudant database.</p>\n<p>In this guide weâ€™ll demonstrate how to create a CouchDB database, define a CouchDB document, save the document to the database and finally retrieve the document from the database.</p>\n<hr>\n<h2 id=\"step-1-install-couchdb-and-create-a-database\"><a href=\"#step-1-install-couchdb-and-create-a-database\" aria-label=\"step 1 install couchdb and create a database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Install CouchDB and create a database</h2>\n<p>Before we can use CouchDB within our server we first need to:</p>\n<ol>\n<li>Download and install CouchDB.</li>\n<li>Set up an admin username and password in CouchDB.</li>\n<li>Create a database. (In this example we're using the name bookstore.)</li>\n</ol>\n<blockquote>\n<p>It is important to remember the database name and credentials, as we will need them later on in the guide.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-2-add-couchdb-to-your-project\"><a href=\"#step-2-add-couchdb-to-your-project\" aria-label=\"step 2 add couchdb to your project permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Add CouchDB to your project</h2>\n<p>To use CouchDB from a server, we need to add Kitura-CouchDB to our dependencies.</p>\n<blockquote>\n<p>If you don't have a server, follow our Create a server guide.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-3-define-the-couchdb-routes\"><a href=\"#step-3-define-the-couchdb-routes\" aria-label=\"step 3 define the couchdb routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Define the CouchDB routes</h2>\n<p>Next, we are going to create a file in our project for the CouchDB routes.</p>\n<p>Open your Application.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Application.swift</code></pre></div>\n<p>Inside the postInit() function add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">initializeCouchRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Create a new file, called CouchRoutes.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Routes/CouchRoutes.swift</code></pre></div>\n<p>Open your CouchRoutes.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Routes/CouchRoutes.swift</code></pre></div>\n<p>Inside our file, we will define two routes. In the first route, we will retrieve a book from the user and save it into the bookstore database. In the second route, we will retrieve all of the documents that have been saved to the database.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CouchDB</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">LoggerAPI</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeCouchRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/couch\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>couchSaveHandler<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/couch\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>couchFindAllHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Define ConnectionProperties and CouchDBClient here</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">couchSaveHandler</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">:</span> <span class=\"token builtin\">BookDocument</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">BookDocument</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Save book here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">couchFindAllHandler</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">BookDocument</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get all books here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-4-define-a-document\"><a href=\"#step-4-define-a-document\" aria-label=\"step 4 define a document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Define a Document</h2>\n<p>CouchDB is a NoSQL database for storing documents. A Document is any structure that can be represented as JSON and contains _id and _rev fields.</p>\n<ul>\n<li>The id field is the unique identifier for the document.</li>\n<li>The _rev field is the revision of the document. It is returned when you make requests and is used to prevent conflicts from multiple users updating the same document.</li>\n</ul>\n<p>To define a CouchDB document, all we need to do is create a Swift object and make it conform to the Document protocol.</p>\n<p>Create a new file, called BookDocument.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Models/BookDocument.swift</code></pre></div>\n<p>Open your BookDocument.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Models/BookDocument.swift</code></pre></div>\n<p>Inside this file, define your BookDocument:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">CouchDB</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">BookDocument</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Document</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">var</span> _rev<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">let</span> title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> price<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span>\n    <span class=\"token keyword\">let</span> genre<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-5-connect-to-couchdb-database\"><a href=\"#step-5-connect-to-couchdb-database\" aria-label=\"step 5 connect to couchdb database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: Connect to CouchDB database</h2>\n<p>Inside our App extension, we will define our connection properties for CouchDB, substituting in the credentials we defined earlier for the admin username and password:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> properties <span class=\"token operator\">=</span> <span class=\"token function\">ConnectionProperties</span><span class=\"token punctuation\">(</span>\n        host<span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// http address</span>\n        port<span class=\"token punctuation\">:</span> <span class=\"token number\">5984</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// http port</span>\n        secured<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// https or http</span>\n        username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;CouchDB-username>\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// admin username</span>\n        password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;CouchDB-password>\"</span>  <span class=\"token comment\">// admin password</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we can use these connection properties to create our CouchDB client:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> couchDBClient <span class=\"token operator\">=</span> <span class=\"token function\">CouchDBClient</span><span class=\"token punctuation\">(</span>connectionProperties<span class=\"token punctuation\">:</span> properties<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The CouchDBClient represents a connection to a CouchDB server. It is initialized with your ConnectionProperties and handles the creation, retrieval and deletion of CouchDB databases.</p>\n<hr>\n<h2 id=\"step-6-save-our-document-to-the-database\"><a href=\"#step-6-save-our-document-to-the-database\" aria-label=\"step 6 save our document to the database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6: Save our document to the database</h2>\n<p>We are going to modify the couchSaveHandler we defined earlier to store a document in our database.</p>\n<p>The first thing we need to do is connect to our bookstore database. We achieve this by using the CouchDBClient.retrieveDB() method and passing in our database name.</p>\n<p>Inside the couchSaveHandler add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>couchDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookstore\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> database <span class=\"token operator\">=</span> database  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Initialize document here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Since the CouchDB functions are asynchronous, we must handle responses inside the function's callback.</p>\n</blockquote>\n<p>Now we are going to save our book document to the database. We will use the CouchDB Database class to make an HTTP request to our database. This class can make CRUD (Create, Retrieve, Update, Delete) requests for our CouchDB Document. In this case we will use create to save our book document. If the call succeeds we then return the book document with it's updated id and revision, otherwise we return an error.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">database<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>bookDocument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> response <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RequestError</span><span class=\"token punctuation\">(</span>httpCode<span class=\"token punctuation\">:</span> error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> updatedBook <span class=\"token operator\">=</span> book\n    updatedBook<span class=\"token punctuation\">.</span>_id <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>id\n    updatedBook<span class=\"token punctuation\">.</span>_rev <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>rev\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>updatedBook<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Your completed POST handler should now look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">couchSaveHandler</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">:</span> <span class=\"token builtin\">BookDocument</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">BookDocument</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>couchDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookstore\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> database <span class=\"token operator\">=</span> database  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> response <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RequestError</span><span class=\"token punctuation\">(</span>httpCode<span class=\"token punctuation\">:</span> error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> updatedBook <span class=\"token operator\">=</span> book\n            updatedBook<span class=\"token punctuation\">.</span>_id <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>id\n            updatedBook<span class=\"token punctuation\">.</span>_rev <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>rev\n            <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>updatedBook<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-7-test-saving-a-document-to-the-database\"><a href=\"#step-7-test-saving-a-document-to-the-database\" aria-label=\"step 7 test saving a document to the database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 7: Test saving a document to the database</h2>\n<p>Now we're going to test our route by passing in a book and checking that it is saved to the database.</p>\n<p>First we need to start our Kitura server.</p>\n<p>Once the server is running, open a terminal and run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST \\\n      http://localhost:8080/couch \\\n      -H &#39;content-type: application/json&#39; \\\n      -d &#39;{\n      &quot;title&quot;: &quot;A Game of Thrones&quot;,\n      &quot;price&quot;: 14.99,\n      &quot;genre&quot;: &quot;Fantasy&quot;\n  }&#39;</code></pre></div>\n<p>This will make a POST request to the server and we should be returned our book document in JSON format:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;_id&quot;:&quot;&lt;generated id number&gt;&quot;,&quot;_rev&quot;:&quot;&lt;generated revision number&gt;&quot;,&quot;title&quot;:&quot;A Game of Thrones&quot;,&quot;price&quot;:14.99,&quot;genre&quot;:&quot;Fantasy&quot;}</code></pre></div>\n<blockquote>\n<p>Since we did not provide an _id in our request, a UUID was generated for us.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-8-retrieve-the-document-from-the-database\"><a href=\"#step-8-retrieve-the-document-from-the-database\" aria-label=\"step 8 retrieve the document from the database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 8: Retrieve the document from the database</h2>\n<p>Similar to our other handler, the first step is to connect to our bookstore database.</p>\n<p>Inside the couchFindAllHandler add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>couchDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookstore\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> database <span class=\"token operator\">=</span> database  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Retrieve documents here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next we're going to retrieve our document from the database. To retrieve all the documents from a CouchDB database we need to use the aptly named retrieveAll method.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">database<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveAll</span><span class=\"token punctuation\">(</span>includeDocuments<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>allDocuments<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> allDocuments <span class=\"token operator\">=</span> allDocuments <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RequestError</span><span class=\"token punctuation\">(</span>httpCode<span class=\"token punctuation\">:</span> error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Decode and return books here</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When we made the call to retrieveAll we set the includeDocuments parameter to true, this means that each row returned from the database will have an additional field called \"doc\" in it which contains the JSON document. These documents can then be decoded to a given Swift type using decodeDocuments(ofType:).</p>\n<p>We decode all the documents that match the BookDocument type, and return them in the completion:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> books <span class=\"token operator\">=</span> allDocuments<span class=\"token punctuation\">.</span><span class=\"token function\">decodeDocuments</span><span class=\"token punctuation\">(</span>ofType<span class=\"token punctuation\">:</span> <span class=\"token builtin\">BookDocument</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Your completed GET handler should now look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">couchFindAllHandler</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">BookDocument</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>couchDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookstore\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> database <span class=\"token operator\">=</span> database  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        database<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveAll</span><span class=\"token punctuation\">(</span>includeDocuments<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>allDocuments<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> allDocuments <span class=\"token operator\">=</span> allDocuments <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token function\">RequestError</span><span class=\"token punctuation\">(</span>httpCode<span class=\"token punctuation\">:</span> error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">let</span> books <span class=\"token operator\">=</span> allDocuments<span class=\"token punctuation\">.</span><span class=\"token function\">decodeDocuments</span><span class=\"token punctuation\">(</span>ofType<span class=\"token punctuation\">:</span> <span class=\"token builtin\">BookDocument</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-9-test-retrieving-documents-from-the-database\"><a href=\"#step-9-test-retrieving-documents-from-the-database\" aria-label=\"step 9 test retrieving documents from the database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 9: Test retrieving documents from the database</h2>\n<p>If you have followed the guide so far then you will now have a book document in your database, which we can retrieve using the code we just wrote.</p>\n<p>To do this, start the server and navigate to: <a href=\"http://localhost:8080/couch\">http://localhost:8080/couch</a>.</p>\n<p>This will call GET on the /couch route and we will see the book we posted earlier returned in JSON format. The book data persists even if we restart the Kitura server as it is now stored in a database.</p>","frontmatter":{"path":"/docs/databases/couchdb","title":"Kitura CouchDB"}},"docsList":{"nodes":[{"title":"Getting Started","items":[{"title":"Installation","link":"/docs/getting-started/installation"},{"title":"Hello World","link":"/docs/getting-started/hello-world"},{"title":"Create a Server","link":"/docs/getting-started/create-server"}]},{"title":"Logging","items":[{"title":"What is Logging?","link":"/docs/logging/what-is-logging"},{"title":"HeliumLogger","link":"/docs/logging/helium-logger"}]},{"title":"Routing","items":[{"title":"What is Routing?","link":"/docs/routing/what-is-routing"},{"title":"Codable Routing","link":"/docs/routing/codable-routing"},{"title":"OpenAPI","link":"/docs/routing/kitura-openapi"},{"title":"Raw Routing","link":"/docs/routing/raw-routing"}]},{"title":"Databases","items":[{"title":"What are Databases?","link":"/docs/databases/what-are-databases"},{"title":"SQL - ORM","link":"/docs/databases/orm"},{"title":"SQL - Kuery","link":"/docs/databases/kuery"},{"title":"NoSQL - CouchDB","link":"/docs/databases/couchdb"}]},{"title":"Sessions","items":[{"title":"What are Sessions?","link":"/docs/sessions/what-are-sessions"},{"title":"Codable Routing Session","link":"/docs/sessions/codable-session"},{"title":"Raw Routing Session","link":"/docs/sessions/raw-session"}]},{"title":"Authentication","items":[{"title":"What is Authentication?","link":"/docs/authentication/what-is-authentication"},{"title":"Basic Authentication","link":"/docs/authentication/basic-authentication"},{"title":"JSON Web Tokens","link":"/docs/authentication/jwt"},{"title":"OAuth 2.0 with Facebook/Google","link":"/docs/authentication/oauth2"}]},{"title":"Web Applications","items":[{"title":"What is Templating?","link":"/docs/web/what-is-templating"},{"title":"Static File Server","link":"/docs/web/static-file-server"},{"title":"Stencil","link":"/docs/web/stencil"},{"title":"Markdown","link":"/docs/web/markdown"}]},{"title":"Deploying","items":[{"title":"Monitoring","link":"/docs/deploying/monitoring"},{"title":"Enabling SSL/TLS","link":"/docs/deploying/enabling-ssl"},{"title":"Docker","link":"/docs/deploying/docker"},{"title":"Kubernetes","link":"/docs/deploying/kubernetes"},{"title":"Cloud Foundry","link":"/docs/deploying/cloud-foundry"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}