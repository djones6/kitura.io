{"componentChunkName":"component---src-templates-docs-js","path":"/docs/sessions/codable-session","webpackCompilationHash":"ce65eca4090760710b8f","result":{"data":{"docs":{"html":"<h1 id=\"codable-routing-session\"><a href=\"#codable-routing-session\" aria-label=\"codable routing session permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Codable Routing Session</h1>\n<p>HTTP is a stateless connection protocol, that is the server can't distinguish one request from another. Sessions and cookies provide HTTP with state, they allow the server to know who is making a specific request and respond accordingly.</p>\n<p>This guide uses Kitura-Session with Codable routing leveraging type-safe sessions. If you want to use sessions with raw routing, check out the Kitura Session with raw routing guide.</p>\n<hr>\n<h2 id=\"step-1-create-your-session-routes\"><a href=\"#step-1-create-your-session-routes\" aria-label=\"step 1 create your session routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Create your session routes</h2>\n<p>In this guide we are going to create two Kitura routes:</p>\n<ul>\n<li>A GET route, where we retrieve the books from our session.</li>\n<li>A POST route, where we store a book in our session.</li>\n</ul>\n<p>We are using the Book model from the routing guide in our routes, however you could use any codable object.</p>\n<p>To use Kitura-Session from a server, we need to add Kitura-Session to our dependencies.</p>\n<blockquote>\n<p>If you don't have a server, follow our Create a server guide.</p>\n</blockquote>\n<p>Once that is complete, open your Application.swift file in your default text editor (or Xcode if you prefer):</p>\n<p>Open your Application.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Application.swift</code></pre></div>\n<p>Inside the postInit() function add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">initializeTypeSafeSessionRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Create a new file, called TypeSafeSessionRoutes.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Routes/TypeSafeSessionRoutes.swift</code></pre></div>\n<p>Open your TypeSafeSessionRoutes.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Routes/TypeSafeSessionRoutes.swift</code></pre></div>\n<p>Inside this file, add the framework for our routes code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraSession</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeTypeSafeSessionRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>postSessionHandler<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>getSessionHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Define handlers here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We will add our postSessionHandler and getSessionHandler later in this guide.</p>\n<hr>\n<h2 id=\"step-2-define-your-session\"><a href=\"#step-2-define-your-session\" aria-label=\"step 2 define your session permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Define your Session</h2>\n<p>To use sessions with Codable routes, we need to model the structure of what we will store in the session. We do this by defining a Swift type that conforms to the TypeSafeSession protocol.</p>\n<p>If you don't already have one, create a Middlewares folder:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir Sources/Application/Middlewares</code></pre></div>\n<p>Create a new file, called CheckoutSession.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Middlewares/CheckoutSession.swift</code></pre></div>\n<p>Open your CheckoutSession.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Middlewares/CheckoutSession.swift</code></pre></div>\n<p>We can use either a class or a struct for TypeSafeMiddleware here but we will use a Class.</p>\n<p>Inside this file, define your CheckoutSession class:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraSession</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CheckoutSession</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeSession</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> sessionId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>                       <span class=\"token comment\">// Requirement: every session must have an ID</span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span>                           <span class=\"token comment\">// User-defined type, where Book conforms to Codable</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>sessionId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                   <span class=\"token comment\">// Requirement: must be able to create a new (empty)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sessionId <span class=\"token operator\">=</span> sessionId              <span class=\"token comment\">// session containing just an ID. Assign a default or</span>\n        books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                              <span class=\"token comment\">// empty value for any non-optional properties.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Defines the configuration of the user's type: how the cookie is constructed and how</span>\n<span class=\"token comment\">// the session is persisted.</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">CheckoutSession</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> sessionCookie<span class=\"token punctuation\">:</span> <span class=\"token builtin\">SessionCookie</span> <span class=\"token operator\">=</span> <span class=\"token function\">SessionCookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"MySession\"</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Top Secret\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> store<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Store</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>When using a class you need to declare it as final.</p>\n</blockquote>\n<p>The minimum requirements for a type-safe session are:</p>\n<ul>\n<li>sessionID: An identifier that is unique to the session</li>\n<li>Initilizer: Used to create a new session from a sessionId</li>\n<li>sessionCookie: Defines the name of the cookie and the secret data used to encrypt it</li>\n<li>An optional store: Defines how sessions should be persisted</li>\n</ul>\n<p>With our class, we have created a session that will store an array of books, via a cookie called \"MySession\" and using \"Top Secret\" as the password to encrypt that cookie. Since we didn't specify a store a default in memory store is used.</p>\n<blockquote>\n<p>For an example of a persistent store for sessions see Kitura-Session-Redis</p>\n</blockquote>\n<hr>\n<h2 id=\"step-3-add-session-post-route\"><a href=\"#step-3-add-session-post-route\" aria-label=\"step 3 add session post route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Add session POST route</h2>\n<p>Inside the app extension in TypeSafeSessionRoutes.swift, we add our postSessionHandler:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">postSessionHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CheckoutSession</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Book</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have registered our TypeSafeSession on our handler by adding it to the signature.</p>\n<p>When the handler is called the middleware is run and our session is created.</p>\n<p>Within postSessionHandler, we can then interact with our session:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">session<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\nsession<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What we're doing here is storing the posted Book into the session.</p>\n<p>We use the append method as we know books is an Array as we defined it as an Array in the CheckoutSession class.</p>\n<p>Then we need to save the session.</p>\n<p>Now we can add a route for retrieving the data.</p>\n<hr>\n<h2 id=\"step-4-add-session-get-route\"><a href=\"#step-4-add-session-get-route\" aria-label=\"step 4 add session get route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Add session GET route</h2>\n<p>Below our postSessionHandler handler add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSessionHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CheckoutSession</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Add that's it! We've now enabled a Kitura Session on our server.</p>\n<p>Your completed TypeSafeSessionRoutes.swift should now look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraSession</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeTypeSafeSessionRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>postSessionHandler<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>getSessionHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">postSessionHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CheckoutSession</span><span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Book</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        session<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">getSessionHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CheckoutSession</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-5-test-our-session\"><a href=\"#step-5-test-our-session\" aria-label=\"step 5 test our session permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: Test our Session</h2>\n<p>An easy way to test our our session is using Kitura OpenAPI. You can follow our Kitura OpenAPI Guide to learn how to set up OpenAPI and use the interface for testing.</p>\n<p>Alternatively, we can test our routes by sending a request using curl, with cookies enabled.</p>\n<p>Open Terminal and enter the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST \\\nhttp://localhost:8080/cart \\\n-b cookies.txt -c cookies.txt \\\n-H &#39;content-type: application/json&#39; \\\n-d &#39;{\n    &quot;id&quot;: 1,\n    &quot;title&quot;: &quot;War and Peace&quot;,\n    &quot;price&quot;: 10.99,\n    &quot;genre&quot;: &quot;Historical drama&quot;\n}&#39;</code></pre></div>\n<p>If our request was successful, our book will be returned to us:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;id&quot;:1,&quot;title&quot;:&quot;War and Peace&quot;,&quot;price&quot;:10.99,&quot;genre&quot;:&quot;Historical drama&quot;}</code></pre></div>\n<p>We will also have a cookie that curl has stored in the cookies.txt file.</p>\n<p>To retrieve our book, we make another curl request to our server:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET \\\nhttp://localhost:8080/cart \\\n-b cookies.txt -c cookies.txt</code></pre></div>\n<p>If the request is successful, it will return the book we just sent to the server.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[{&quot;id&quot;:1,&quot;title&quot;:&quot;War and Peace&quot;,&quot;price&quot;:10.99,&quot;genre&quot;:&quot;Historical drama&quot;}]</code></pre></div>\n<p>The cookie we sent with our request has identifed our session, so that our saved book can be returned.</p>\n<p>Each user making requests to these routes will create their own basket of books.</p>\n<p>We can demonstrate this by deleting our cookie:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rm cookies.txt</code></pre></div>\n<p>Followed by making a new GET request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET \\\nhttp://localhost:8080/cart \\\n-b cookies.txt -c cookies.txt</code></pre></div>\n<p>This represents a user without a session so we are returned an empty array:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[]</code></pre></div>","frontmatter":{"path":"/docs/sessions/codable-session","title":"Codable Routing Session"}},"docsList":{"nodes":[{"title":"Getting Started","items":[{"title":"Installation","link":"/docs/getting-started/installation"},{"title":"Hello World","link":"/docs/getting-started/hello-world"},{"title":"Create a Server","link":"/docs/getting-started/create-server"}]},{"title":"Logging","items":[{"title":"What is Logging?","link":"/docs/logging/what-is-logging"},{"title":"HeliumLogger","link":"/docs/logging/helium-logger"}]},{"title":"Routing","items":[{"title":"What is Routing?","link":"/docs/routing/what-is-routing"},{"title":"Codable Routing","link":"/docs/routing/codable-routing"},{"title":"OpenAPI","link":"/docs/routing/kitura-openapi"},{"title":"Raw Routing","link":"/docs/routing/raw-routing"}]},{"title":"Databases","items":[{"title":"What are Databases?","link":"/docs/databases/what-are-databases"},{"title":"SQL - ORM","link":"/docs/databases/orm"},{"title":"SQL - Kuery","link":"/docs/databases/kuery"},{"title":"NoSQL - CouchDB","link":"/docs/databases/couchdb"}]},{"title":"Sessions","items":[{"title":"What are Sessions?","link":"/docs/sessions/what-are-sessions"},{"title":"Codable Routing Session","link":"/docs/sessions/codable-session"},{"title":"Raw Routing Session","link":"/docs/sessions/raw-session"}]},{"title":"Authentication","items":[{"title":"What is Authentication?","link":"/docs/authentication/what-is-authentication"},{"title":"Basic Authentication","link":"/docs/authentication/basic-authentication"},{"title":"JSON Web Tokens","link":"/docs/authentication/jwt"},{"title":"OAuth 2.0 with Facebook/Google","link":"/docs/authentication/oauth2"}]},{"title":"Web Applications","items":[{"title":"What is Templating?","link":"/docs/web/what-is-templating"},{"title":"Static File Server","link":"/docs/web/static-file-server"},{"title":"Stencil","link":"/docs/web/stencil"},{"title":"Markdown","link":"/docs/web/markdown"}]},{"title":"Deploying","items":[{"title":"Monitoring","link":"/docs/deploying/monitoring"},{"title":"Enabling SSL/TLS","link":"/docs/deploying/enabling-ssl"},{"title":"Docker","link":"/docs/deploying/docker"},{"title":"Kubernetes","link":"/docs/deploying/kubernetes"},{"title":"Cloud Foundry","link":"/docs/deploying/cloud-foundry"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}