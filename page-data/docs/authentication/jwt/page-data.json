{"componentChunkName":"component---src-templates-docs-js","path":"/docs/authentication/jwt","webpackCompilationHash":"a23aaa782308d970cae7","result":{"data":{"docs":{"html":"<h1 id=\"json-web-token-authentication\"><a href=\"#json-web-token-authentication\" aria-label=\"json web token authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON Web Token Authentication</h1>\n<p>A JSON Web Token (JWT) defines a compact and self-contained way for securely transmitting information between parties as a JSON object. You can find out more about JWTs at <a href=\"https://jwt.io/\">JWT.IO</a>.</p>\n<p><a href=\"https://github.com/IBM-Swift/Swift-JWT\">Swift-JWT</a> is our implementation of JSON Web Token using Swift. It allows you to create sign and verify JWTs on iOS, macOS and Linux using a range of algorithms. This guide will demonstrate how to use Swift-JWT to implement Single Sign On (SSO) authentication for your Kitura routes. This will allow a user to sign in once and then to access resources from other routes without having to repeat the authentication process.</p>\n<hr>\n<h2 id=\"step-1-create-the-jwt-routes\"><a href=\"#step-1-create-the-jwt-routes\" aria-label=\"step 1 create the jwt routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Create the JWT routes</h2>\n<p>To use JWTs from a server, we need to add <a href=\"https://github.com/IBM-Swift/Swift-JWT#add-dependencies\">Swift-JWT to our dependencies</a>.</p>\n<blockquote>\n<p>If you don't have a server, follow our Create a server guide.</p>\n</blockquote>\n<p>Once we have added Swift-JWT, we need a file for our JWT routes.</p>\n<p>Firstly, open your Application.swift file in your default text editor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Application.swift</code></pre></div>\n<p>Inside the postInit() function add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">initializeJWTRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Create a new file, called JWTRoutes.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Routes/JWTRoutes.swift</code></pre></div>\n<p>Open your JWTRoutes.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">open <span class=\"token builtin\">Sources</span><span class=\"token operator\">/</span><span class=\"token builtin\">Application</span><span class=\"token operator\">/</span><span class=\"token builtin\">Routes</span><span class=\"token operator\">/</span><span class=\"token builtin\">JWTRoutes</span><span class=\"token punctuation\">.</span>swift</code></pre></div>\n<p>Inside this file, add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeJWTRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtlogin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token comment\">// Read credentials and generate JWT here</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token comment\">// Verify JWT here</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Define JWT signer and verifier here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code imports our requires modules, sets up the framework for a routes page and defines the two raw routes that we will use in our guide.</p>\n<hr>\n<h2 id=\"step-2-set-up-your-signing-and-verifying-algorithm\"><a href=\"#step-2-set-up-your-signing-and-verifying-algorithm\" aria-label=\"step 2 set up your signing and verifying algorithm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Set up your signing and verifying algorithm</h2>\n<p>Swift-JWT supports multiple algorithms for signing and verifying JWTs as defined by RFC7518. This is implemented by creating a JWTSigner and JWTVerifier struct with a required credentials.</p>\n<p>The algorithms are as follows:</p>\n<ul>\n<li><a href=\"./jwt-hmac\">HMAC</a></li>\n<li><a href=\"./jwt-ecdsa\">ECDSA</a></li>\n<li><a href=\"./jwt-rsa\">RSA</a></li>\n</ul>\n<blockquote>\n<p>Follow one of the links above to configure your signing and verifying algorithm before continuing with the rest of this guide. </p>\n</blockquote>\n<hr>\n<h2 id=\"step-3-define-a-model-to-represent-the-users-credentials\"><a href=\"#step-3-define-a-model-to-represent-the-users-credentials\" aria-label=\"step 3 define a model to represent the users credentials permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Define a model to represent the user's credentials</h2>\n<p>For the initial authentication, the user will have to provide their username and password. This could be achieved with basic authentication, the Authorization header or in the body of a POST request. In this guide we will pass the username and password in the body of a POST request and use a model to represent this.</p>\n<blockquote>\n<p>Passwords and JWTs with sensitive data must be kept private and should always be exchanged over a secure layer like HTTPS.</p>\n</blockquote>\n<p>Create a new file, called UserCredentials.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Models/UserCredentials.swift</code></pre></div>\n<p>Open your UserCredentials.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Models/UserCredentials.swift</code></pre></div>\n<p>Inside this file we define our UserCredentials model:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-4-authenticate-the-user\"><a href=\"#step-4-authenticate-the-user\" aria-label=\"step 4 authenticate the user permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Authenticate the User</h2>\n<p>We need to read the user's credentials in our POST route so they can be authenticated.</p>\n<p>Inside the POST route add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Users credentials are authenticated</span></code></pre></div>\n<p>At this stage, you would normally hash the password and verify it against a database. However, for simplicity, we are going to assume the user successfully logged in.</p>\n<hr>\n<h2 id=\"step-5-create-the-signed-jwt\"><a href=\"#step-5-create-the-signed-jwt\" aria-label=\"step 5 create the signed jwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: Create the signed JWT</h2>\n<p>A JWT contains claims about the user that we want include in subsequent requests. You can specify any information as a claim, however there are \"Registered Claims\" which have a pre-defined meaning:</p>\n<ul>\n<li>iss: The issuer of the token.</li>\n<li>sub: The subject of the token.</li>\n<li>aud: The audience of the token.</li>\n<li>exp: The expiration time which MUST be after the current date/time.</li>\n<li>nbf: Defines the time before which the JWT MUST NOT be accepted for processing.</li>\n<li>iat: The time the JWT was issued. Can be used to determine the age of the JWT.</li>\n<li>jti: Unique identifier for the JWT. Can be used to prevent the JWT from being replayed.</li>\n</ul>\n<p>Swift-JWT comes with a struct representing these Registered Claims which we will use for our example.</p>\n<p>Inside the POST route, beneath the code where we authenticated the user, initialize the user's claims:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> myClaims <span class=\"token operator\">=</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">:</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>timeIntervalSinceNow<span class=\"token punctuation\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The claims information tells us the username which is the subject of the token, that they were authenticated by Kitura and that the token will expire in one hour.</p>\n<p>Next, we will initialize our JWT:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> myClaims<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can sign this JWT using the JWTSigner we created in step 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtSigner<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally we return the signed JWT string to the user:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>signedJWT<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Our completed login route should look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtlogin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Users credentials are authenticated</span>\n    <span class=\"token keyword\">let</span> myClaims <span class=\"token operator\">=</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">:</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>timeIntervalSinceNow<span class=\"token punctuation\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> myClaims<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtSigner<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>signedJWT<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-6-test-the-jwt-creation\"><a href=\"#step-6-test-the-jwt-creation\" aria-label=\"step 6 test the jwt creation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6: Test the JWT creation</h2>\n<p>Compile your project and start the server.</p>\n<p>To test the route using curl, open Terminal and enter the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST \\\n    http://localhost:8080/jwtlogin \\\n    -H &#39;content-type: application/json&#39; \\\n    -d &#39;{\n    &quot;username&quot;: &quot;Joe Bloggs&quot;,\n    &quot;password&quot;: &quot;password&quot;\n}&#39;</code></pre></div>\n<p>You should be returned a JWT string that is structured xxxx.yyyy.zzzz where xxxx is the base64 encoded header, yyyy is the base 64 encoded claims and zzzz is the signature.</p>\n<p>Below is an example JWT, generated using HS256 with the password \"kitura\". The one returned by your curl request will have different values but the same structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJLaXR1cmEiLCJzdWIiOiJKb2UgQmxvZ2dzIiwiZXhwIjoxNTUzMDE4Mjg0LjMyOTcwMTl9.t55WealACtYGCQGS3EQgRQuurmNSBO5fWZqzqJjEIi</code></pre></div>\n<p>We can decode the JWT string using the debugger at JWT.IO which allows us view the headers and claims.</p>\n<hr>\n<h2 id=\"step-7-verify-a-jwt\"><a href=\"#step-7-verify-a-jwt\" aria-label=\"step 7 verify a jwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 7: Verify a JWT</h2>\n<p>So far, we have created a signed JWT, which allows a user to authenticate themselves. At this stage, the user would attach the JWT string to future requests either using cookies or the Authorization header. When we receive this JWT string on other routes, we need to verify that we signed it and it hasn't been altered.</p>\n<p>Let's start by reading the JWT string from the Authorization header of the request. The JWT string will be contained within the second component of the header, so we validate that there are only two components within the header and that the first contains the string \"Bearer\".</p>\n<p>Inside the GET route, add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> authHeader <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> authComponents <span class=\"token operator\">=</span> authHeader<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">components</span><span class=\"token punctuation\">(</span>separatedBy<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    authComponents<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Bearer\"</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token number\">_</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The JWT string will be authComponents[1], so we will verify this string and use it to initialize a JWT.</p>\n<p>Add the following code to your guard statement, below authComponents[0] == \"Bearer\":</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> jwt <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jwtString<span class=\"token punctuation\">:</span> authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">)</span></code></pre></div>\n<p>There we have it, the user's JWT is now available for us to use within our route. If we successfully initialized the JWT using the jwtVerifier, we know that we signed it in the first place and the contents haven't been changed. If the signature isn't verified, we reject the request and return the 401 unauthorized status code.</p>\n<p>To finish, let's send the decoded JWT back to the user.</p>\n<p>After the else closure, add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Your completed GET route should now look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> authHeader <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> authComponents <span class=\"token operator\">=</span> authHeader<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">components</span><span class=\"token punctuation\">(</span>separatedBy<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        authComponents<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">let</span> jwt <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jwtString<span class=\"token punctuation\">:</span> authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token number\">_</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-8-test-the-protected-route\"><a href=\"#step-8-test-the-protected-route\" aria-label=\"step 8 test the protected route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 8: Test the protected Route</h2>\n<p>To test this, restart your server and send the POST request from Step 6.</p>\n<p>Copy the returned JWT string and paste it into the following curl request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET \\\nhttp://localhost:8080/jwtprotected \\\n-H &#39;content-type: application/json&#39; \\\n-H &#39;Authorization: Bearer &lt;Your JWT string here&gt;&#39;</code></pre></div>\n<p>You should see your JWT with your username returned to you. This should look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;claims&quot;:{&quot;iss&quot;:&quot;Kitura&quot;,&quot;sub&quot;:&quot;Joe Bloggs&quot;,&quot;exp&quot;:574703307.61258602},&quot;header&quot;:{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;ES256&quot;}}</code></pre></div>\n<p>Congratulations! We have just created a JWT single sign on system using a Kitura Server. Your completed JWTRoutes.swift file for HS256 should look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeJWTRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtlogin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> myClaims <span class=\"token operator\">=</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">:</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>timeIntervalSinceNow<span class=\"token punctuation\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> myClaims<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtSigner<span class=\"token punctuation\">)</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>signedJWT<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">let</span> authHeader <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> authComponents <span class=\"token operator\">=</span> authHeader<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">components</span><span class=\"token punctuation\">(</span>separatedBy<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                authComponents<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">let</span> jwt <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jwtString<span class=\"token punctuation\">:</span> authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">let</span> <span class=\"token number\">_</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Example for HMAC signer and verifier</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> jwtSigner <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTSigner</span><span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kitura\"</span><span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> jwtVerifier <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTVerifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kitura\"</span><span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-9-jwts-on-codable-routes-optional\"><a href=\"#step-9-jwts-on-codable-routes-optional\" aria-label=\"step 9 jwts on codable routes optional permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 9: JWTs on Codable Routes (Optional)</h2>\n<p>In our example we used raw routing since we chose to pass the user credentials via the request headers. If we want to use JWTs on our codable routes, we need to encapulate the verification and creation of the users JWT in a TypeSafeMiddleware. We can then register our TypeSafeMiddleware on a Codable route to authenticate the user and access their claims.</p>\n<hr>\n<h3 id=\"step-9a-define-our-type-safe-middleware\"><a href=\"#step-9a-define-our-type-safe-middleware\" aria-label=\"step 9a define our type safe middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 9a: Define our type safe middleware.</h3>\n<p>If you don't already have one, create a Middlewares folder:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir Sources/Application/Middlewares</code></pre></div>\n<p>Create a new file, called TypeSafeJWT.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Middlewares/TypeSafeJWT.swift</code></pre></div>\n<p>Open your TypeSafeJWT.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Middlewares/TypeSafeJWT.swift</code></pre></div>\n<p>Inside this file, define TypeSafeJWT with the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import SwiftJWT\nimport Kitura\n\nstruct TypeSafeJWT&lt;C: Claims&gt;: TypeSafeMiddleware {\n    static func handle(request: RouterRequest, response: RouterResponse, completion: @escaping (TypeSafeJWT?, RequestError?) -&gt; Void) {\n\n    }\n}</code></pre></div>\n<p>The TypeSafeMiddleware protocol requires us to implement the handle function. This function is where we will interact with the request headers; we then return an instance of TypeSafeJWT on success, or a RequestError on failure. The TypeSafeJWT struct is generic so it can be used on any JWT.</p>\n<p>Within the handler we are interested in the decoded JWT so we add that as a field:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> jwt<span class=\"token punctuation\">:</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span></code></pre></div>\n<p>Finally, we initialize our JWT using the same functions as Step 7 for our protected GET route.</p>\n<p>Inside our handle function, add the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> authHeader <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> authComponents <span class=\"token operator\">=</span> authHeader<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">components</span><span class=\"token punctuation\">(</span>separatedBy<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    authComponents<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">let</span> jwt <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jwtString<span class=\"token punctuation\">:</span> authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token function\">TypeSafeJWT</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Your completed TypeSafeJWT.swift file should look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Kitura</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">TypeSafeJWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Claims</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeMiddleware</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> jwt<span class=\"token punctuation\">:</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterRequest</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterResponse</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">TypeSafeJWT</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> authHeader <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> authComponents <span class=\"token operator\">=</span> authHeader<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">components</span><span class=\"token punctuation\">(</span>separatedBy<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            authComponents<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">let</span> jwt <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jwtString<span class=\"token punctuation\">:</span> authComponents<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token function\">TypeSafeJWT</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"step-9b-register-typesafejwt-on-a-route\"><a href=\"#step-9b-register-typesafejwt-on-a-route\" aria-label=\"step 9b register typesafejwt on a route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 9b: Register TypeSafeJWT on a route.</h3>\n<p>Back in our routes file, JWTRoutes.swift, we are going to register a new route using our TypeSafeMiddleware.</p>\n<p>In the function initializeJWTRoutes, add a new route called \"/jwtCodable\"</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtCodable\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>typeSafeHandler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In your App extension, define the typeSafeHandler:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">typeSafeHandler</span><span class=\"token punctuation\">(</span>typeSafeJWT<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeJWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>typeSafeJWT<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This function will run the middleware, TypeSafeJWT, and if it succeeds it will return the JWT instance, just as we did in our raw routing example above.</p>\n<hr>\n<h3 id=\"step-9c-test-the-new-codable-route\"><a href=\"#step-9c-test-the-new-codable-route\" aria-label=\"step 9c test the new codable route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 9c: Test the new Codable route</h3>\n<p>To test this route, restart your server and send the POST request from Step 6.</p>\n<p>Copy the returned JWT string and paste it into the following curl request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET \\\nhttp://localhost:8080/jwtCodable \\\n-H &#39;content-type: application/json&#39; \\\n-H &#39;Authorization: Bearer &lt;Your JWT string here&gt;&#39;</code></pre></div>\n<p>We should see your JWT with your username returned to you. This should look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;claims&quot;:{&quot;iss&quot;:&quot;Kitura&quot;,&quot;sub&quot;:&quot;Joe Bloggs&quot;,&quot;exp&quot;:574703307.61258602},&quot;header&quot;:{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;ES256&quot;}}</code></pre></div>","frontmatter":{"path":"/docs/authentication/jwt","title":"JSON Web Token Authentication"}},"docsList":{"nodes":[{"title":"Getting Started","items":[{"title":"Installation","link":"/docs/getting-started/installation"},{"title":"Hello World","link":"/docs/getting-started/hello-world"},{"title":"Create a Server","link":"/docs/getting-started/create-server"}]},{"title":"Logging","items":[{"title":"What is Logging?","link":"/docs/logging/what-is-logging"},{"title":"HeliumLogger","link":"/docs/logging/helium-logger"}]},{"title":"Routing","items":[{"title":"What is Routing?","link":"/docs/routing/what-is-routing"},{"title":"Codable Routing","link":"/docs/routing/codable-routing"},{"title":"OpenAPI","link":"/docs/routing/kitura-openapi"},{"title":"Raw Routing","link":"/docs/routing/raw-routing"}]},{"title":"Databases","items":[{"title":"What are Databases?","link":"/docs/databases/what-are-databases"},{"title":"SQL - ORM","link":"/docs/databases/orm"},{"title":"SQL - Kuery","link":"/docs/databases/kuery"},{"title":"NoSQL - CouchDB","link":"/docs/databases/couchdb"}]},{"title":"Sessions","items":[{"title":"What are Sessions?","link":"/docs/sessions/what-are-sessions"},{"title":"Codable Routing Session","link":"/docs/sessions/codable-session"},{"title":"Raw Routing Session","link":"/docs/sessions/raw-session"}]},{"title":"Authentication","items":[{"title":"What is Authentication?","link":"/docs/authentication/what-is-authentication"},{"title":"Basic Authentication","link":"/docs/authentication/basic-authentication"},{"title":"JSON Web Tokens","link":"/docs/authentication/jwt"},{"title":"OAuth 2.0 with Facebook/Google","link":"/docs/authentication/oauth2"}]},{"title":"Web Applications","items":[{"title":"What is Templating?","link":"/docs/web/what-is-templating"},{"title":"Static File Server","link":"/docs/web/static-file-server"},{"title":"Stencil","link":"/docs/web/stencil"},{"title":"Markdown","link":"/docs/web/markdown"}]},{"title":"Deploying","items":[{"title":"Monitoring","link":"/docs/deploying/monitoring"},{"title":"Enabling SSL/TLS","link":"/docs/deploying/enabling-ssl"},{"title":"Docker","link":"/docs/deploying/docker"},{"title":"Kubernetes","link":"/docs/deploying/kubernetes"},{"title":"Cloud Foundry","link":"/docs/deploying/cloud-foundry"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}