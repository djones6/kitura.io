{"componentChunkName":"component---src-pages-blogs-js","path":"/blogs/","webpackCompilationHash":"ce65eca4090760710b8f","result":{"data":{"blogs":{"nodes":[{"html":"<p>We’re excited to announce the release of Kitura 2.8, alongside a number of other releases and improvements to the Kitura ecosystem.</p>\n<h2 id=\"kitura-28\"><a href=\"#kitura-28\" aria-label=\"kitura 28 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura 2.8</h2>\n<p>Kitura 2.8 adds compatibility with Swift 5.1, and comes with a range of improvements and bug fixes, many of which are community requests and contributions. You can find full information in the GitHub release notes.</p>\n<h3 id=\"logging-with-swift-log\"><a href=\"#logging-with-swift-log\" aria-label=\"logging with swift log permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging with swift-log</h3>\n<p>In a previous article, we described how LoggerAPI can be set up to direct Kitura’s logging output to swift-log. With Kitura 2.8, a new convenience function Kitura.logTo(myLogger) makes it easy to direct all of Kitura’s log output to swift-log, without needing to import (or declare a dependency on) the LoggerAPI package in your code.</p>\n<p>HeliumLogger can now be used as a LogHandler logging backend for swift-log.</p>\n<h3 id=\"improvements-to-server-startup-and-listening\"><a href=\"#improvements-to-server-startup-and-listening\" aria-label=\"improvements to server startup and listening permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Improvements to server startup and listening</h3>\n<p>You can now detect failure when starting a Kitura server through the process exit code – for example, when the server’s port is already in use. By default, Kitura.run() will now terminate the process with a non-zero status in the event that a server fails to start. To handle failure yourself, a new API Kitura.startWithStatus() -> Int has been introduced, which returns the number of servers that failed to start.</p>\n<p>Listening on a specific address is now possible – an optional onAddress: String parameter has been added to Kitura.addHTTPServer. This allows a Kitura server to be exposed only on a specific network – for example, localhost – rather than listening on all adapters.</p>\n<h3 id=\"easy-cookies\"><a href=\"#easy-cookies\" aria-label=\"easy cookies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easy cookies</h3>\n<p>We’ve also made it easier to add cookies to a response, by including a convenience response.addCookie() function. This removes a lot of the boilerplate code otherwise required to work with Foundation’s HTTPCookie type:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bakery\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">HTTPStatusCode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">addCookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"variant\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"gluten-free\"</span><span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">:</span> <span class=\"token string\">\"my.biz\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> otherAttributes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSecure</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"single-page-applications\"><a href=\"#single-page-applications\" aria-label=\"single page applications permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single-page applications</h3>\n<p>Support for single-page applications has been added. StaticFileServer can now be configured to serve a default file (for example, /index.html) if the requested path is not found.</p>\n<hr>\n<h2 id=\"new-features-in-the-kitura-ecosystem\"><a href=\"#new-features-in-the-kitura-ecosystem\" aria-label=\"new features in the kitura ecosystem permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New features in the Kitura ecosystem</h2>\n<p>Beyond these core Kitura improvements, we’d like to highlight some other new features we’ve been working on:</p>\n<h3 id=\"jwt-authentication\"><a href=\"#jwt-authentication\" aria-label=\"jwt authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JWT Authentication</h3>\n<p>Use of JSON web tokens for authentication has become increasingly popular – we recently released Kitura-CredentialsJWT which enables JWT authentication for Codable routes, and have added support for supplying JWT authentication tokens in KituraKit.</p>\n<p>Read more in: JWT authentication using KituraKit.</p>\n<h3 id=\"event-streams-support-with-swiftkafka\"><a href=\"#event-streams-support-with-swiftkafka\" aria-label=\"event streams support with swiftkafka permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Streams support with SwiftKafka</h3>\n<p>We recently released SwiftKafka, a Swift package for producing and consuming events from an Apache Kafka platform. SwiftKafka is a standalone library and does not require Kitura, but they work well together!</p>\n<p>Read more in: Introducing SwiftKafka: Accessing Event Streams in Swift</p>\n<h3 id=\"documentation\"><a href=\"#documentation\" aria-label=\"documentation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Documentation</h3>\n<p>The “Learn” section of kitura.io has been updated with:</p>\n<ul>\n<li>Improved walkthrough of building your project using Docker(kitura.io#388)</li>\n<li>Improved guides for deploying to Kubernetes or CloudFoundry (kitura.io#386, kitura.io#392)</li>\n<li>New guide for building your Kitura project with Swift-NIO (kitura.io#400)</li>\n</ul>","frontmatter":{"title":"Announcing Kitura 2.8 and more","blurb":"We’re excited to announce the release of Kitura 2.8, alongside a number of other releases and improvements to the Kitura ecosystem.","date":"2019-08-12","path":"/blogs/announcing-kitura-2-8-and-more","author":"David Jones"}},{"html":"<p>With the release of KituraKit 0.0.24, it is now possible to make type-safe requests to a Kitura server using a JWT for authentication. In addition, we’d like to introduce Kitura-CredentialsJWT, which provides a convenient way to add JWT authentication to Codable routes.</p>\n<p>In a previous blog post Swift JWT 3.0: Codable JSON web tokens, we outlined the code for implementing JWT authentication in Kitura for Codable routes. In this post, we’ll show how KituraKit makes it easy to perform type-safe requests to APIs requiring JWT authentication, and how Kitura-CredentialsJWT reduces the boilerplate required on the server side.</p>\n<h2 id=\"what-is-a-json-web-token\"><a href=\"#what-is-a-json-web-token\" aria-label=\"what is a json web token permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a JSON Web Token?</h2>\n<p>In short, a JWT is a small JSON payload consisting of a Header object, a Claims object and a signature. They are a self-contained way for securely transmitting information between parties. If you would like to know more about JWTs, check out jwt.io.</p>\n<hr>\n<h2 id=\"setting-up-jwt-authentication-using-kiturakit\"><a href=\"#setting-up-jwt-authentication-using-kiturakit\" aria-label=\"setting up jwt authentication using kiturakit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up JWT authentication using KituraKit</h2>\n<p>Sending a JWT for authentication is simple: attach a JWTCredentials to your request, as in this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Replace with a valid JWT string: three base64-encoded values separated by full stops.</span>\n<span class=\"token keyword\">let</span> jwtString <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;my_jwt_token_string>\"</span>\n \nclient<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/protected\"</span><span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">:</span> <span class=\"token function\">JWTCredentials</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">:</span> jwtString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> user <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to access protected resource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User obtained: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Under the covers, KituraKit will send your token in an Authorization: Bearer <token> header. When Kitura receives a request to the protected route, it will verify the token’s signature, and can then choose whether the JWT permits access to that resource based on its claims.</p>\n<h2 id=\"server-side-authentication-using-kitura-credentialsjwt\"><a href=\"#server-side-authentication-using-kitura-credentialsjwt\" aria-label=\"server side authentication using kitura credentialsjwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server-side authentication using Kitura-CredentialsJWT</h2>\n<p>In a previous blog post Type-Safe Authentication using OAuth tokens, we introduced the TypeSafeCredentials protocol as part of Kitura-Credentials, and with it a number of initial implementations: TypeSafeGoogleToken, TypeSafeFacebookToken and TypeSafeHTTPBasic.</p>\n<p>We’ve released 0.0.1 of Kitura-CredentialsJWT, which extends the JWT type to conform to TypeSafeMiddleware. This means that you can include it in your Codable route handler as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsJWT</span>\n \n<span class=\"token comment\">// Define the claims that must appear in the JWT</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyClaims</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Claims</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Subject's id (e.g. name)</span>\n    <span class=\"token keyword\">let</span> sub<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// Set up TypeSafeJWT by specifying the method for verifying a JWT signature</span>\n<span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;PrivateKey>\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token builtin\">TypeSafeJWT</span><span class=\"token punctuation\">.</span>verifier <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// Use the JWT type as a Type-Safe Middleware to protect a route. The handler </span>\n<span class=\"token comment\">// will only be invoked if the JWT can be successfully verified, and contains</span>\n<span class=\"token comment\">// the required claims.</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/protected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">:</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MyClaims</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// (Decide whether to permit the user access to this resource, based on the JWT claims)</span>\n    <span class=\"token comment\">// Send the requested resource:</span>\n    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that, compared to the example in our previous post, there is no longer a requirement to implement the TypeSafeMiddleware protocol yourself. We just need to bootstrap the TypeSafeJWT configuration with a method (and key) for validating incoming JWTs.</p>\n<p>The TypeSafeJWT type also provides a basic token cache facility, which can remember previously validated JWTs to reduce the computational overhead of verifying the same JWT repeatedly.</p>\n<hr>\n<h2 id=\"using-jwts-alongside-other-authentication-methods\"><a href=\"#using-jwts-alongside-other-authentication-methods\" aria-label=\"using jwts alongside other authentication methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using JWTs alongside other authentication methods</h2>\n<p>In addition, you can use JWT authentication as part of Kitura-Credentials’ TypeSafeMultiCredentials, which allows a single route handler to accept multiple types of authentication. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Credentials</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyMultiAuthedUser</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeMultiCredentials</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>            <span class=\"token comment\">// Protocol requirement</span>\n    <span class=\"token keyword\">let</span> provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>      <span class=\"token comment\">// Protocol requirement</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>          <span class=\"token comment\">// Custom property</span>\n \n    <span class=\"token comment\">// Acceptable methods of authentication: Google token, JWT and HTTP Basic</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> authenticationMethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">TypeSafeCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">MyGoogleUser</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MyClaims</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span>\n \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>successfulAuth<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeCredentials</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>id\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>provider <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>provider\n \n        <span class=\"token comment\">// Initialize additional properties based on authentication type.</span>\n        <span class=\"token keyword\">switch</span> successfulAuth <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> googleToken <span class=\"token keyword\">as</span> <span class=\"token builtin\">GoogleTokenProfile</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> googleToken<span class=\"token punctuation\">.</span>name\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> jwt <span class=\"token keyword\">as</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MyClaims</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>sub\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">// HTTP Basic</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>id\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The MyMultiAuthedUser type can then be used in place of JWT in your handler. (Note: the implementation of MyGoogleUser and MyBasicAuth is omitted here for brevity but more details can be found in the Multiple authentication methods section of Type-Safe Authentication using OAuth tokens).</p>","frontmatter":{"title":"JWT authentication using KituraKit","blurb":"With the release of KituraKit 0.0.24, it is now possible to make type-safe requests to a Kitura server using a JWT for authentication","date":"2019-08-12","path":"/blogs/jwt-authentication-using-kiturakit","author":"David Jones"}},{"html":"<p>We have just released SwiftKafka, a new Swift package for producing and consuming from an Apache Kafka distributed streaming platform. This blog post explains why you would use Apache Kafka, how you can use the Swift Kafka API and provides an example of producing and consuming messages.</p>\n<h2 id=\"what-is-apache-kafka\"><a href=\"#what-is-apache-kafka\" aria-label=\"what is apache kafka permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Apache Kafka?</h2>\n<p>Apache Kafka is a distributed event streaming platform capable of handling trillions of events a day. A streaming platform has three key capabilities:</p>\n<ul>\n<li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.</li>\n<li>Store streams of records in a fault-tolerant durable way.</li>\n<li>Process streams of records as they occur.</li>\n</ul>\n<p>Instead of sending messages directly from a producer to a consumer, Kafka stores streams of records in categories called topics. Producers add messages to a topic and consumers read messages from a topic. Producing and consuming from a stream is very cheap and works with Kafka’s built in distributed architecture. The result is a messaging system that is fast, fault tolerant and can handle high volumes of data.</p>\n<p>If you would like to learn more about Kafka, check out the Apache Kafka website.</p>\n<hr>\n<h2 id=\"swift-kafka\"><a href=\"#swift-kafka\" aria-label=\"swift kafka permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Kafka</h2>\n<p>The new SwiftKafka library is built on top of the librdkafka C library. This provides high performance messaging with an easy to use Swift API. Swift Kafka provides three classes that you will need to connect your application to event streams:</p>\n<h3 id=\"kafkaproducer\"><a href=\"#kafkaproducer\" aria-label=\"kafkaproducer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaProducer</h3>\n<p>The KafkaProducer class produces messages to a Kafka server.</p>\n<p>Once you have initialized a KafkaProducer, you can call connect(brokers:) to connect to one or more Kafka servers.</p>\n<p>The producer can then call send() with a KafkaProducerRecord, which contains the following fields:</p>\n<ul>\n<li>Topic: The topic where the producer sends the record. If this topic doesn’t exist, the producer will try to create it.</li>\n<li>Value: The body of the message that will be sent with the record.</li>\n<li>Partition: The topic partition where the producer sends the record. If this is not set the server will automatically assign the partition.</li>\n<li>Key: If the partition is not set, the server will assign records with the same key to the same partition. Since order is guaranteed within a partition, these records will be consumed in the order they were produced.</li>\n</ul>\n<p>The message is sent to the connected brokers and the Kafka server stores the message on a partition of the topic.</p>\n<h3 id=\"kafkaconsumer\"><a href=\"#kafkaconsumer\" aria-label=\"kafkaconsumer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaConsumer</h3>\n<p>The KafkaConsumer class consumes messages from a Kafka server.</p>\n<p>Once you have initialized a KafkaConsumer, you can call connect(brokers:) to connect to one or more Kafka servers.</p>\n<p>You can then subscribe to topics using subscribe(). This will distribute the topic partitions evenly between consumers with the same group id. If you do not set a group id, a random UUID will be used.</p>\n<p>Alternatively, you can use assign() to manually set the partition and offset where the consumer will consume from.</p>\n<p>Both subscribe() and assign() are asynchronous and will return immediately, however they may take up to sessionTimeoutMs (default 10 seconds) * 2 before the consumer connects and is assigned partitions.</p>\n<p>To consume messages from Kafka you call poll(timeout:). This will poll Kafka, blocking for timeout seconds. When the function completes, you are returned an array of KafkaConsumerRecord, with the following fields:</p>\n<ul>\n<li>Value: The message value, if it can be UTF8 decoded to a String.</li>\n<li>ValueData: The message value as raw data.</li>\n<li>Key: The message key, if it can be UTF8 decoded to a String.</li>\n<li>KeyData: The message key as raw data.</li>\n<li>Offset: The message offset.</li>\n<li>Topic: The topic that the message was consumed from.</li>\n<li>Partition: The partition that the message was consumed from.</li>\n</ul>\n<p>When you have finished consuming, you can call close() to close the connection and unassign the consumer. The Kafka server then rebalances the unassigned partitions between other consumers in the group. If you don’t call close(), the consumer will be closed when the class is deallocated.</p>\n<h3 id=\"kafkaconfig\"><a href=\"#kafkaconfig\" aria-label=\"kafkaconfig permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaConfig</h3>\n<p>The KafkaConfig class contains your settings for a Kafka consumer or Kafka producer. You pass an instance of this class to the Kafka client initializer to set its configuration.</p>\n<p>You initialize the class with default values, which you can change using the helper functions. For example, if you want to enable all logging, you would set the debug variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>debug <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">]</span></code></pre></div>\n<hr>\n<h2 id=\"swift-kafka-example\"><a href=\"#swift-kafka-example\" aria-label=\"swift kafka example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Kafka Example</h2>\n<p>To demonstrate Swift Kafka, we are going to create a producer that reads user input and sends it to the Kafka server and a consumer that reads the message and prints it back to the user. The first thing we need is a Kafka server to connect to:</p>\n<h3 id=\"setting-up-a-kafka-server-mac\"><a href=\"#setting-up-a-kafka-server-mac\" aria-label=\"setting up a kafka server mac permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Kafka Server (Mac)</h3>\n<p>For macOS, we will use Homebrew to install and run the server:</p>\n<ol>\n<li>Install librdkafka (required to build SwiftKafka)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install librdkafka</code></pre></div>\n<ol start=\"2\">\n<li>Install Kafka server (and Java dependency)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew cask install java\n$ brew install kafka</code></pre></div>\n<ol start=\"3\">\n<li>Start the Zookeeper service</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew services start zookeeper</code></pre></div>\n<ol start=\"4\">\n<li>Start the Kafka service</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew services start kafka</code></pre></div>\n<p>These commands will install and run Zookeeper and Kafka as background services. Zookeeper is a centralized service that maintains information within distributed systems and is required by Kafka.</p>\n<hr>\n<h3 id=\"setting-up-a-kafka-server-linux\"><a href=\"#setting-up-a-kafka-server-linux\" aria-label=\"setting up a kafka server linux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Kafka Server (Linux)</h3>\n<p>On Linux, please follow the Kafka quick start instructions and install librdkafka.</p>\n<hr>\n<h3 id=\"create-a-kafka-producer\"><a href=\"#create-a-kafka-producer\" aria-label=\"create a kafka producer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Kafka Producer</h3>\n<p>We will create a simple producer that reads user input from the terminal and sends it to a Kafka topic using Swift Kafka.</p>\n<ol>\n<li>Create an executable Swift project</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir kafkaProducer\n$ cd kafkaProducer/\n$ swift package init --type executable</code></pre></div>\n<ol start=\"2\">\n<li>Add Swift Kafka</li>\n</ol>\n<p>Open your Package.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ open Package.swift</code></pre></div>\n<p>Add Swift Kafka to your dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.package(url: &quot;https://github.com/IBM-Swift/SwiftKafka.git&quot;, from: &quot;0.0.0&quot;)</code></pre></div>\n<p>Then add SwiftKafka to your target dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.target(\n            name: &quot;kafkaProducer&quot;,\n            dependencies: [&quot;SwiftKafka&quot;]),</code></pre></div>\n<ol start=\"3\">\n<li>Add the KafkaProducer code</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/kafkaProducer/main.swift</code></pre></div>\n<p>Replace the code in this file with:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKafka</span>\n \n<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>brokerAddressFamily <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>v4\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">KafkaProducer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>connection<span class=\"token delimiter variable\">)</span></span> brokers\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter message to produce to Kafka:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> userInput <span class=\"token operator\">=</span> <span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>producerRecord<span class=\"token punctuation\">:</span> <span class=\"token function\">KafkaProducerRecord</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> userInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">switch</span> result <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successfully produced: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">Any</span><span class=\"token delimiter variable\">)</span></span> to offset: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>offset<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send message with error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>description<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code will initialize a new KafkaProducer. We have configured our producer to only connect to brokers on IPv4 since we are running on localhost. We then connect to the Kafka server we started earlier on the default port of “9092”. The program will then read user input from the terminal and send it to the broker.</p>\n<p>You can test this out by running the program in terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ swift run</code></pre></div>\n<hr>\n<h3 id=\"create-a-kafka-consumer\"><a href=\"#create-a-kafka-consumer\" aria-label=\"create a kafka consumer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Kafka Consumer</h3>\n<p>We will create a simple consumer that reads everything from a topic and prints it to the terminal.</p>\n<ol>\n<li>Create an executable Swift project</li>\n</ol>\n<p>We start by creating an executable Swift project using the same steps as above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir kafkaConsumer\n$ cd kafkaConsumer/\n$ swift package init --type executable</code></pre></div>\n<ol start=\"2\">\n<li>Add Swift Kafka</li>\n</ol>\n<p>Open your Package.swift file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ open Package.swift</code></pre></div>\n<p>Add Swift Kafka to your dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.package(url: &quot;https://github.com/IBM-Swift/SwiftKafka.git&quot;, from: &quot;0.0.0&quot;)</code></pre></div>\n<p>Then add SwiftKafka to your target dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.target(\n            name: &quot;kafkaProducer&quot;,\n            dependencies: [&quot;SwiftKafka&quot;]),</code></pre></div>\n<ol start=\"3\">\n<li>Add the KafkaConsumer code</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/kafkaConsumer/main.swift</code></pre></div>\n<p>Replace the code in this file with:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKafka</span>\n \n<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>autoOffsetReset <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>beginning\nconfig<span class=\"token punctuation\">.</span>brokerAddressFamily <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>v4\nconfig<span class=\"token punctuation\">.</span>groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"exampleGroup\"</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">KafkaConsumer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>connection<span class=\"token delimiter variable\">)</span></span> brokers\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting for messages from Kafka:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> records <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> records <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consumed message: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">Any</span><span class=\"token delimiter variable\">)</span></span> from offset <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>offset<span class=\"token delimiter variable\">)</span></span>\"</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error thrown: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code will initialize a new KafkaConsumer. We have configured our producer to only connect to brokers on IPv4 since we are running on localhost, to begin consuming from the start of all messages and to consume with a group id of “exampleGroup”. We then connect to the Kafka server we started earlier on the default port of “9092”. The program will then read messages from the “example” topic and print the message.</p>\n<p>You can test this out by running the program:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ swift run</code></pre></div>\n<p>Once the consumer connects to Kafka it should consume all the messages you sent from the producer and print them to the terminal.</p>","frontmatter":{"title":"Introducing SwiftKafka: Accessing Event Streams in Swift","blurb":"We have just released SwiftKafka, a new Swift package for producing and consuming from an Apache Kafka distributed streaming platform","date":"2019-08-12","path":"/blogs/swift-kafka-event-streams","author":"Andrew Lees"}},{"html":"<p>swift-log is a new logging API package for Swift, developed by the Swift Server Working Group. It aims to provide a consistent and standardised logging solution across the server-side Swift ecosystem.</p>\n<p>With the release of Kitura’s LoggerAPI 1.9, you can now easily direct your log messages to a swift-log logging backend.</p>\n<p>In addition, the upcoming Kitura 2.8 release will allow you to configure Kitura to log via swift-log with a single line of code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">Kitura</span><span class=\"token punctuation\">.</span><span class=\"token function\">logTo</span><span class=\"token punctuation\">(</span>mySwiftLogger<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"why-use-a-logging-api\"><a href=\"#why-use-a-logging-api\" aria-label=\"why use a logging api permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why use a logging API?</h2>\n<p>When writing an application, you may wish to generate messages – to aid debugging, to record normal program flow, or audit user input. Some of those messages may be relevant in different contexts – while developing, you may want as much information as possible to understand how your code behaves, whereas in production, that would be too much noise – you want only the important messages that tell you when something requires your attention. In addition, producing messages affects performance.</p>\n<p>Logging APIs decouple the production of log messages from their output. They allow code to emit messages at different levels: warnings and errors for important messages, and debug for understanding program execution. Which messages are output and their destination (stdout, database, file) can be configured independently, by the application author or during deployment. This means that an application does not need to be recompiled to toggle logging, or change the logging level. In addition, if all code uses the same logging API, then all messages produced by the application and its dependencies can be sent to a single destination.</p>\n<p>By configuring Kitura and your existing code that uses LoggerAPI to output to swift-log, you can take advantage of swift-log in your own code, combine with other dependencies that adopt swift-log, all logging to the same destination.</p>\n<hr>\n<h2 id=\"configuring-loggerapi-with-swift-log\"><a href=\"#configuring-loggerapi-with-swift-log\" aria-label=\"configuring loggerapi with swift log permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring LoggerAPI with swift-log</h2>\n<p>To direct your existing LoggerAPI log statements to swift-log, you need only set the Log.swiftLogger property:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Logging</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">LoggerAPI</span>\n \n<span class=\"token keyword\">var</span> mySwiftLogger <span class=\"token operator\">=</span> <span class=\"token function\">Logger</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">:</span> <span class=\"token string\">\"my-swift-logger\"</span><span class=\"token punctuation\">)</span>\nmySwiftLogger<span class=\"token punctuation\">.</span>logLevel <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>info\n \n<span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span>swiftLogger <span class=\"token operator\">=</span> mySwiftLogger</code></pre></div>\n<p>Note that there are some minor differences in the hierarchy of logging levels defined by LoggerAPI and swift-log. See the LoggerAPI documentation Log.isLogging() for details of how log levels are mapped.</p>\n<h2 id=\"how-does-swift-log-compare-to-loggerapi\"><a href=\"#how-does-swift-log-compare-to-loggerapi\" aria-label=\"how does swift log compare to loggerapi permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does swift-log compare to LoggerAPI?</h2>\n<p>Both LoggerAPI and swift-log provide a means to decouple log message production from the logging implementation (backend). In both cases, the producer (your own code, or one of your dependencies) calls a logging API function indicating the logging level and the message content. And in both cases, the application author decides what level of log messages should be logged, and where the log messages should be sent.</p>\n<p>There are some differences in the architecture, however: LoggerAPI provides a global Log type that can be invoked from anywhere in your code, and from any thread. Swift-log provides a local Logger with instance functions for logging, and this must be passed around or stored as a property. LoggerAPI effectively allows you to store an instance globally, and internally uses locks to provide thread-safe access to these global loggers.</p>\n<p>There are pro’s and con’s to each approach, which are nicely summarised in the thread for the swift-log pitch on the Swift Forums.</p>\n<p>If you wish to use swift-log throughout your application, you can configure Kitura to log to it, but then use your own swift-log Logger instances to perform logging. Because the logging backend configuration is global, all log messages will be emitted to the same destination.</p>","frontmatter":{"title":"Using swift-log with Kitura","blurb":"With the release of Kitura’s LoggerAPI 1.9, you can now easily direct your log messages to a swift-log logging backend","date":"2019-06-12","path":"/blogs/using-swift-log-with-kitura","author":"David Jones"}},{"html":"<p>We’re delighted to announce the release of Kitura 2.7, alongside a range of other releases and improvements to the Kitura ecosystem.</p>\n<h2 id=\"kitura-27\"><a href=\"#kitura-27\" aria-label=\"kitura 27 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura 2.7</h2>\n<p>Kitura 2.7 is fully compatible with Swift 5, and comes with a range of improvements, bug fixes and performance work. You can find full information in the GitHub release notes.</p>\n<p>One user-facing feature is support for UNIX domain sockets, both client and server. This gives Kitura the ability to listen on a UNIX domain socket instead of an INET (TCP) socket and was requested in our Slack channel.</p>\n<p>There is a new Kitura.addHTTPServer(onUnixDomainSocket:) API to allow you to listen on a UNIX domain socket. Additionally, you can make outbound (client) HTTP requests over a UNIX domain socket (for example, to the Docker daemon) using KituraNet’s new HTTP.request(unixDomainSocketPath:) API. This is also available when running on KituraNIO.</p>\n<p>There are also major improvements to Kitura’s generation of OpenAPI documents, which are now more compliant with the specification and support a wider variety of types of endpoints.</p>\n<p>Finally, there is the usual array of bug fixes and performance improvements. The performance improvements should be especially noticeable when running on Swift 5.</p>\n<hr>\n<h2 id=\"kitura-nio-20\"><a href=\"#kitura-nio-20\" aria-label=\"kitura nio 20 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura-NIO 2.0</h2>\n<p>We are also announcing support for SwiftNIO 2.0 on Swift 5. SwiftNIO is a high performance networking framework from Apple, and Kitura gained the ability to use it last year following the release of SwiftNIO 1.0.</p>\n<p>Now that SwiftNIO 2.0 has been released, Kitura will use it when you build in KITURA_NIO mode on Swift 5.</p>\n<p>We would like to thank the SwiftNIO team for their continuing help and advice during this migration.</p>\n<p>Note: If you are not ready to move to Swift 5, but do wish to use KituraNIO, you should make sure your Package.swift specifies .upToNextMinor(from: \"2.6.0\") for Kitura so that your app continues to use SwiftNIO 1.0. This is because SwiftNIO 2.0 requires Swift 5.</p>\n<hr>\n<h2 id=\"kitura-websocket-nio\"><a href=\"#kitura-websocket-nio\" aria-label=\"kitura websocket nio permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura-WebSocket-NIO</h2>\n<p>Kitura’s WebSocket implementation has also been ported to SwiftNIO 2.0 and we now offer 3 different implementations according to your need:</p>\n<p>Kitura-WebSocket: traditional implementation\nKitura-WebSocket-NIO 1.0: implementation on SwiftNIO 1.0, for Swift 4\nKitura-WebSocket-NIO 2.0: implementation on SwiftNIO 2.0, for Swift 5</p>\n<p>This transition should be seamless for users. If you do experience any problems, just let us know!</p>\n<h2 id=\"bluersa\"><a href=\"#bluersa\" aria-label=\"bluersa permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BlueRSA</h2>\n<p>BlueRSA, our package providing support for RSA encryption, decryption and signing, has been enhanced to provide easy APIs for making RSA keypairs. RSAKey.makeKeyPair() returns a tuple containing an RSA private and public key, and RSAKey.pemString returns an RSA key in PEM format.</p>\n<p>Previously this functionality was only available through the <code class=\"language-text\">openssl</code> command-line interface, and making this available on BlueRSA means we have consistent functionality between BlueRSA and BlueECC, which already offered this for elliptic-curve keys.</p>\n<h2 id=\"documentation\"><a href=\"#documentation\" aria-label=\"documentation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Documentation</h2>\n<p>We continue to improve the Kitura documentation.</p>\n<p>The “Learn” section of kitura.io has been completely written, and now features much more detailed information on Kitura, including information on logging, routing, databases, sessions, authentication, building web applications, and deploying to the cloud.</p>\n<p>The “Learn” section uses the example of building a book store application. You can either follow the documentation from the beginning to build a complete application, or dip into the section that particularly interests you.</p>","frontmatter":{"title":"Announcing Kitura 2.7 and more","blurb":"We’re delighted to announce the release of Kitura 2.7, alongside a range of other releases and improvements to the Kitura ecosystem.","date":"2019-04-17","path":"/blogs/announcing-kitura-2-7-and-more","author":"Ian Partridge"}},{"html":"<p>We have just released version 3.3 of Swift-JWT. This utilizes our new BlueECC repository to support signing and verifying of JWTs using ES256, ES384 and ES512 algorithms. In this blog, we will explain what these algorithms are and demonstrate how to use them in Swift-JWT.</p>\n<h2 id=\"elliptic-curve-digital-signature-algorithm-ecdsa\"><a href=\"#elliptic-curve-digital-signature-algorithm-ecdsa\" aria-label=\"elliptic curve digital signature algorithm ecdsa permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elliptic Curve Digital Signature Algorithm (ECDSA)</h2>\n<p>To explain why you should use these algorithms, I’ll quote the JSON Web Algorithms specification:</p>\n<blockquote>\n<p>The Elliptic Curve Digital Signature Algorithm (ECDSA) provides for the use of Elliptic Curve Cryptography, which is able to provide equivalent security to RSA cryptography but using shorter key sizes and with greater processing speed for many operations. This means that ECDSA digital signatures will be substantially smaller in terms of length than equivalently strong RSA digital signatures.</p>\n</blockquote>\n<p>In short they are faster, use smaller keys and produce shorter signatures. For these reasons, the specification recommends elliptic curve above RSA and states that the requirement for ECDSA support will be increased in future releases.</p>\n<p>Finally, Apple requires you use ES256 as an authentication method for lots of their services, including Apple Push Notification service (APNs), MusicKit, DeviceCheck and App Store Connect API.</p>\n<hr>\n<h2 id=\"the-es256-es384-and-es512-algorithms\"><a href=\"#the-es256-es384-and-es512-algorithms\" aria-label=\"the es256 es384 and es512 algorithms permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The ES256, ES384 and ES512 Algorithms</h2>\n<p>There are currently three recognized implementations of ECDSA for JSON Web Tokens (JWT):</p>\n<ul>\n<li>ES256 – ECDSA using P-256 and SHA-256</li>\n<li>ES384 – ECDSA using P-384 and SHA-384</li>\n<li>ES512 – ECDSA using P-521 and SHA-512</li>\n</ul>\n<p>The P-XXX refers to the prime256v1, secp384r1, and secp521r1 elliptic curves. These curves generate a key pair with XXX number of private key data bits. The SHA-XXX refers to the SHA algorithm that is used to hash the plaintext prior to it being signed. Using larger keys provides more security but requires longer signatures and more processing power. We recommend ES256 for most users since it provides the same security as 3072 bit RSA key, which is considered secure beyond 2030.</p>\n<p>If you would like to know more about elliptic curve cryptography, check out our BlueECC blog post.</p>\n<hr>\n<h2 id=\"elliptic-curve-key-pair\"><a href=\"#elliptic-curve-key-pair\" aria-label=\"elliptic curve key pair permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elliptic curve key pair</h2>\n<p>ECDSA uses asymmetric elliptic curve keys. These can be generated through Apple, OpenSSL or using BlueECC. For a p-256 curve, these keys should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> privateKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\"\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">BEGIN</span> <span class=\"token constant\">EC</span> <span class=\"token constant\">PRIVATE</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token builtin\">MHcCAQEEIJX</span><span class=\"token operator\">+</span>87WJ7Gh19sohyZnhxZeXYNOcuGv4Q<span class=\"token operator\">+</span>8MLge4UkaZoAoGCCqGSM49\n<span class=\"token builtin\">AwEHoUQDQgAEikc5m6C2xtDWeeAeT18WElO37zvFOz8p4kAlhvgIHN23XIClNESg</span>\n<span class=\"token builtin\">KVmLgSSq2asqiwdrU5YHbcHFkgdABM1SPA</span><span class=\"token operator\">==</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">END</span> <span class=\"token constant\">EC</span> <span class=\"token constant\">PRIVATE</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token string\">\"\"</span>\"\n<span class=\"token keyword\">let</span> publicKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\"\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">BEGIN</span> <span class=\"token constant\">PUBLIC</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token builtin\">MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEikc5m6C2xtDWeeAeT18WElO37zvF</span>\n<span class=\"token builtin\">Oz8p4kAlhvgIHN23XIClNESgKVmLgSSq2asqiwdrU5YHbcHFkgdABM1SPA</span><span class=\"token operator\">==</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">END</span> <span class=\"token constant\">PUBLIC</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token string\">\"\"</span>\"</code></pre></div>\n<p>The PEM format, refers to the “BEGIN”/”END” headers with some base64Encoded ASN1 data between them. If you decode the p-256 private key’s ASN1 data (e.g. using this online decoder) there are three main components of the key:</p>\n<ul>\n<li>32 bytes of private data</li>\n<li>an object identifier that specifies the elliptic curve</li>\n<li>65 bytes of public key data</li>\n</ul>\n<p>When you create a ES256/ES384/ES512 JWTSigner or JWTVerifier in Swift-JWT, it will extract the required components from the PEM string.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> signer <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTSigner</span><span class=\"token punctuation\">.</span><span class=\"token function\">es256</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> verifier <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTVerifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">es256</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"ecdsa-signing-and-verifying\"><a href=\"#ecdsa-signing-and-verifying\" aria-label=\"ecdsa signing and verifying permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECDSA signing and verifying</h2>\n<p>Once you have your signer and verifier, the process is exactly the same as RSA. To demonstrate this we will sign a JWT using ES256:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> claims <span class=\"token operator\">=</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Joe Bloggs\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> claims<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> signer<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> verified <span class=\"token operator\">=</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>signedJWT<span class=\"token punctuation\">,</span> using<span class=\"token punctuation\">:</span> verifier<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JWT error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce a boolean value of verified and a signed JWT String that is formatted:\n<code class=\"language-text\">&lt;encoded header&gt;.&lt;encoded claims&gt;.&lt;signature&gt;.</code>\nAn example signed JWT using the keys from above would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJraXR1cmEiLCJzdWIiOiJKb2UgQmxvZ2dzIn0._RcOxoU-3IYwFA7W81FmMEA5ON7QDB0mQ6w3HfMg9aOxKaT6ewb6WJcFdMjKggCTjBvlX5Mjr2icKkfrqTUl9A</code></pre></div>\n<p>You can inspect this JWT String using the jwt.io debugger. Select ES256, copy across the private key, public key and JWT string. The debugger will decode your header and claims, as well as verifying the signature.</p>","frontmatter":{"title":"Swift-JWT 3.3: Adding ES256, ES384, and ES512 Support","blurb":"We have just released version 3.3 of Swift-JWT. This utilizes our new BlueECC repository to support signing and verifying of JWTs using various algorithms","date":"2019-03-12","path":"/blogs/swift-jwt-es256-es384-es512","author":"Andrew Lees"}},{"html":"<p>We have just released BlueECC, a new Swift package for cross-platform elliptic curve cryptography. This enables you to encrypt, decrypt, sign and verify data using elliptic curve asymmetric keys. This blog post will explain what elliptic curves are, why you would use them over RSA and provides examples of the BlueECC API.</p>\n<h2 id=\"what-is-elliptic-curve-cryptography\"><a href=\"#what-is-elliptic-curve-cryptography\" aria-label=\"what is elliptic curve cryptography permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Elliptic Curve Cryptography?</h2>\n<p>In RSA cryptography, the security of the public/private key pair relies on the complexity of factorizing a large integer. In Elliptic Curve Cryptography, the security relies on the complexity of finding the discrete logarithm of a random elliptic curve element.</p>\n<p>BlueECC uses the Elliptic Curve Integrated Encryption Scheme (ECIES) and Elliptic Curve Digital Signature Algorithm (ECDSA) for its cryptography. Fortunately, you do not need to know the mathematics behind the algorithms to use them. They work just like RSA with a public key for encryption/verifying and a private key for decryption/signing.</p>\n<hr>\n<h2 id=\"why-use-elliptic-curve-over-rsa\"><a href=\"#why-use-elliptic-curve-over-rsa\" aria-label=\"why use elliptic curve over rsa permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why use Elliptic Curve over RSA?</h2>\n<p>Elliptic curve (EC) keys allow you to perform the same asymmetric public key cryptography as RSA keys. However, they have gained popularity due to the following advantages:</p>\n<ul>\n<li>Smaller key sizes (a 256 bit EC private key is considered equivalent to a 3072 bit RSA private key)</li>\n<li>Faster key generation</li>\n<li>Faster signing/verifying</li>\n<li>Smaller signatures (approximately 1/6th the size of an equivalent RSA signature)</li>\n<li>Smaller encryption payloads (EC adds 81 bytes per message vs 528 bytes for RSA)</li>\n</ul>\n<hr>\n<h2 id=\"blueecc-example\"><a href=\"#blueecc-example\" aria-label=\"blueecc example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BlueECC Example</h2>\n<p>Under the covers, BlueECC uses the Apple Security framework on macOS/iOS and OpenSSL on Linux. This means you can use it on both platforms without installing additional dependencies. BlueECC is available to import through Swift Package Manager or CocoaPods.</p>\n<h3 id=\"generating-ec-keys\"><a href=\"#generating-ec-keys\" aria-label=\"generating ec keys permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generating EC keys</h3>\n<p>We will use the OpenSSL command line to generate our EC private and public keys.</p>\n<ol>\n<li>On macOS you can install OpenSSL using brew:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install openssl</code></pre></div>\n<ol start=\"2\">\n<li>Once you have installed OpenSSL, create your private key:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ openssl ecparam -name prime256v1 -genkey -noout -out ec256priv.pem</code></pre></div>\n<ol start=\"3\">\n<li>Using the private key, create your public key:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ openssl ec -in ec256priv.pem -pubout -out ec256pub.pem</code></pre></div>\n<p>This will have created two files called ec256priv.pem and ec256pub.pem. Open them in a text editor and you will see EC keys for the prime256v1 curve in PEM format. These can then be passed to BlueECC to create your keys:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> ecPubKey <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">ECPublicKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;publicPEM>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> ecPrivKey <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">ECPrivateKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;privatePEM>\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Alternatively, you can generate the EC Keys directly using the BlueECC:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> ecPubKey <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> ecPrivKey<span class=\"token punctuation\">.</span><span class=\"token function\">extractPublicKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ecPrivKey<span class=\"token punctuation\">.</span>pemString<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ecPubKey<span class=\"token punctuation\">.</span>pemString<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"signing-and-verifying\"><a href=\"#signing-and-verifying\" aria-label=\"signing and verifying permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Signing and Verifying</h3>\n<p>One use of asymmetric keys is in signing data. In this case, you produce a signature by signing the data with the private key. If the signature is successfully verified using the public key, you can be sure it was produced using the private key and that the data hasn’t been changed. This ensures the authenticity and integrity of the data.</p>\n<p>With BlueECC you sign the plaintext as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> signature <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> ecPrivKey<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will take your message and use the private key to create an ECSignature. This struct can then be verified with the corresponding public key:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> verified <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>plaintext<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span> using<span class=\"token punctuation\">:</span> ecPubKey<span class=\"token punctuation\">)</span></code></pre></div>\n<p>To produce either true or false depending on whether the signature is valid for the provided plaintext and public key.</p>\n<h3 id=\"encrypting-and-decrypting\"><a href=\"#encrypting-and-decrypting\" aria-label=\"encrypting and decrypting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Encrypting and Decrypting</h3>\n<p>The other use of asymmetric keys is in encryption and decryption. In this case you provide the private key to the person who you want to communicate securely with and they use it to encrypt the plaintext. The message can only be decrypted using the private key.</p>\n<p>Since asymmetric encryption can only be used on a small plaintext, BlueECC uses Elliptic Curve Integrated Encryption Scheme (ECIES). This consists of encrypting the message using AES-GCM with a symmetric key, followed by encrypting that symmetric key using Elliptic-curve Diffie–Hellman (ECDH). The encrypted symmetric key and encrypted message are both sent in an envelope. The receiver of the envelope then decrypts the symmetric key and uses that to decrypt the original message.</p>\n<p>BlueECC handles this process for you, so encryption becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> encrypted <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> ecPubKey<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will produce the encrypted data envelope that is structured as follows:</p>\n<ul>\n<li>Ephemeral public key (65/97/133 bytes depending on curve)</li>\n<li>Encrypted ciphertext (length of the plaintext)</li>\n<li>GCM tag (16 bytes)</li>\n</ul>\n<p>To decrypt this data, pass it to BlueECC with the private key:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> decrypted <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> encrypted<span class=\"token punctuation\">.</span><span class=\"token function\">decrypt</span><span class=\"token punctuation\">(</span>with<span class=\"token punctuation\">:</span> ecPrivKey<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">:</span> decryptedData<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Hello World\"</span></code></pre></div>\n<p>The encrypted data has been decrypted back to the original plaintext.</p>","frontmatter":{"title":"BlueECC: Encrypt, Decrypt, Sign and Verify with Elliptic Curve","blurb":"We have just released BlueECC, a new Swift package for cross-platform elliptic curve cryptography","date":"2019-03-04","path":"/blogs/blueecc-elliptic-curve-cryptography","author":"Andrew Lees"}},{"html":"<p>Kitura CouchDB is a pure Swift client, that allows applications to interact with a CouchDB or Cloudant NoSQL database. We have just released Kitura-CouchDB 3.0, featuring a new Codable API, which removes the JSON boilerplate and works directly with your Swift objects. This blog will describe the new API and demonstrate its benefits, using an example.</p>\n<h2 id=\"codable-kitura-couchdb\"><a href=\"#codable-kitura-couchdb\" aria-label=\"codable kitura couchdb permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Codable Kitura CouchDB</h2>\n<p>Previously, in Kitura CouchDB 2.0, you would interact with the database using SwiftyJSON. This involved a lot of boilerplate code to convert your Swift object to a SwiftyJSON object and vice versa. The introduction of Codable, simplifies the conversion from Swift to JSON and Kitura CouchDB 3.0 utilizes this new functionality in its new API. To demonstrate how this improves usability, we will apply these changes to our CouchDBSample.</p>\n<p>The following examples compare the code required for executing CRUD (create, retrieve, update, delete) operations on a Swift object using Kitura-CouchDB versions 2.0 and 3.0. It assumes you have installed CouchDB and imported Kitura-CouchDB as a dependency in your Swift project.</p>\n<h3 id=\"couchdb-document\"><a href=\"#couchdb-document\" aria-label=\"couchdb document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CouchDB Document</h3>\n<p>CouchDB is a NoSQL database for storing documents. A document is any structure that can be represented as JSON and contains _id and _rev fields.</p>\n<ul>\n<li>The _id field is the unique identifier for the document. If it is not set, a random UUID will be assigned for the document.</li>\n<li>The _rev field is the revision of the document. It is returned when you make requests and is used to prevent conflicts from multiple users updating the same document.</li>\n</ul>\n<p>Kitura CouchDB 3.0 introduces a new Document protocol that encapsulates the requirements of a CouchDB document:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">Document</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> _id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> _rev<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In our example, we define a struct that represents the documents we want to store in our database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyDocument</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Document</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> _id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">var</span> _rev<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n    <span class=\"token keyword\">var</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have made this struct conform to Document so it can be used with the new API.</p>\n<h3 id=\"connect-to-the-database-with-couchdbclient\"><a href=\"#connect-to-the-database-with-couchdbclient\" aria-label=\"connect to the database with couchdbclient permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connect to the database with CouchDBClient</h3>\n<p>The CouchDBClient represents a connection to a CouchDB server. It is initialized from a ConnectionProperties struct:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> properties <span class=\"token operator\">=</span> <span class=\"token function\">ConnectionProperties</span><span class=\"token punctuation\">(</span>\n    host<span class=\"token punctuation\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// http address</span>\n    port<span class=\"token punctuation\">:</span> <span class=\"token number\">5984</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// http port</span>\n    secured<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// https or http</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;CouchDB-username>\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// admin username</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;CouchDB-password>\"</span>  <span class=\"token comment\">// admin password</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> couchDBClient <span class=\"token operator\">=</span> <span class=\"token function\">CouchDBClient</span><span class=\"token punctuation\">(</span>connectionProperties<span class=\"token punctuation\">:</span> properties<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The couchDBClient can then be used to create, retrieve and delete CouchDB databases. For our example we retrieve an existing CouchDB database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Kitura CouchDB 2.0</span>\ncouchDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">dbExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SampleDB\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>exists<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> exists <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> database <span class=\"token operator\">=</span> couchDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">database</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SampleDB\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Use database</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// Kitura CouchDB 3.0</span>\ncouchDBClient<span class=\"token punctuation\">.</span><span class=\"token function\">retrieveDB</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SampleDB\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>database<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> database <span class=\"token operator\">=</span> database <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Use database</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Kitura CouchDB 3.0, dbExists has been replaced with retrieveDB. This will check the database exists and, if it does, initialize a database instance for you in a single function.</p>\n<h3 id=\"database-crud-operations\"><a href=\"#database-crud-operations\" aria-label=\"database crud operations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Database CRUD operations</h3>\n<p>Your database instance is used to perform asynchronous HTTP requests with your documents. In our example, the requests are nested within the previous requests callback to ensure they execute in the desired order.</p>\n<p>We will be using the following document:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> myDocument <span class=\"token operator\">=</span> <span class=\"token function\">MyDocument</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> _rev<span class=\"token punctuation\">:</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"create-a-document\"><a href=\"#create-a-document\" aria-label=\"create a document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Document</h4>\n<p>In Kitura CouchDB 2.0 we have to convert our object using SwiftyJSON, however in Kitura CouchDB 3.0, because we marked the object as a Document, it can be created directly:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Kitura CouchDB 2.0</span>\n<span class=\"token keyword\">let</span> jsonDict <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">:</span> myDocument<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> myDocument<span class=\"token punctuation\">.</span>value\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>jsonDict<span class=\"token punctuation\">)</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> id <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created document with id <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>id<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Retrieve document here</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// Kitura CouchDB 3.0</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>myDocument<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> response <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created document with id <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>response<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Retrieve document here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"retrieve-a-document\"><a href=\"#retrieve-a-document\" aria-label=\"retrieve a document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Retrieve a Document</h4>\n<p>When retrieving a document in Kitura CouchDB 2.0, you had to parse the JSON back into your object. In Kitura CouchDB 3.0, you define the type you expect and it will automatically parse the JSON to your type:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Kitura CouchDB 2.0</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> document <span class=\"token operator\">=</span> document<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> document<span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">let</span> rev <span class=\"token operator\">=</span> document<span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"_rev\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> document<span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> retrievedDoc <span class=\"token operator\">=</span> <span class=\"token function\">MyDocument</span><span class=\"token punctuation\">(</span>_id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span> _rev<span class=\"token punctuation\">:</span> rev<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Document value: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>retrievedDoc<span class=\"token punctuation\">.</span>value<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Update document here</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// Kitura CouchDB 3.0</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">retrieve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MyDocument</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">CouchDBError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">var</span> retrievedDoc <span class=\"token operator\">=</span> document <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Document value: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>retrievedDoc<span class=\"token punctuation\">.</span>value<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Update document here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"update-a-document\"><a href=\"#update-a-document\" aria-label=\"update a document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Update a Document</h4>\n<p>When updating a document in Kitura CouchDB 2.0, you had to convert to and from SwiftyJSON. In Kitura CouchDB 3.0, you can interact and update objects directly:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Kitura CouchDB 2.0</span>\n<span class=\"token keyword\">let</span> newDoc <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"New Value\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> newJson <span class=\"token operator\">=</span> <span class=\"token function\">JSON</span><span class=\"token punctuation\">(</span>newDoc<span class=\"token punctuation\">)</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>retrievedDoc<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">:</span> retrievedDoc<span class=\"token punctuation\">.</span>_rev<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">:</span> newJson<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>rev<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> rev <span class=\"token operator\">=</span> rev <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Document updated. New rev: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>rev<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Delete document here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token comment\">// Kitura CouchDB 3.0</span>\nretrievedDoc<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"New Value\"</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>retrievedDoc<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">:</span> retrievedDoc<span class=\"token punctuation\">.</span>_rev<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">:</span> retrievedDoc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> response <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Document updated. New rev: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>response<span class=\"token punctuation\">.</span>rev<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Delete document here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"delete-a-document\"><a href=\"#delete-a-document\" aria-label=\"delete a document permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delete a Document</h4>\n<p>Since deleting a document only requires the id and rev strings, this API hasn’t changed between versions.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Kitura CouchDB 2.0</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>retrievedDoc<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">:</span> rev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">NSError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> error <span class=\"token operator\">==</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Document successfully deleted\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Kitura CouchDB 3.0</span>\ndatabase<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">:</span> response<span class=\"token punctuation\">.</span>rev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> error <span class=\"token operator\">==</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Document successfully deleted\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"summary\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h3>\n<p>Let’s quickly sum up what we have achieved with the above code examples. We have:</p>\n<ul>\n<li>Connected to a CouchDB database</li>\n<li>Defined our document</li>\n<li>Saved an instance of our document</li>\n<li>Retrieved the saved document</li>\n<li>Updated our document in the database</li>\n<li>Deleted our document</li>\n</ul>\n<p>Even using the most basic model we have saved ourselves twelve lines of code. As documents get more complicated, Kitura-CouchDB 3.0 removes even more boilerplate code, thereby simplifying the code and adding compile time safety.</p>","frontmatter":{"title":"Kitura CouchDB 3.0: Persisting Codable Swift objects in a CouchDB/Cloudant NoSQL Database","blurb":"We have just released Kitura-CouchDB 3.0, featuring a new Codable API","date":"2019-02-01","path":"/blogs/kitura-couchdb-cloudant-nosql-database","author":"Andrew Lees"}},{"html":"<p>We are delighted to announce the release of Kitura 2.6, the latest release of the popular open source Swift web framework.</p>\n<p>Alongside this release are a number of exciting announcements about the Kitura and Swift@IBM ecosystem, including a new KituraStudio IDE, a new partnership with Realm, and a major new release of our Swift-Kuery database system.</p>\n<p>Learn more below and click through to the detailed blog posts on each topic.</p>\n<h2 id=\"kitura-26\"><a href=\"#kitura-26\" aria-label=\"kitura 26 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura 2.6</h2>\n<p>Kitura 2.6 includes several functional enhancements, plus improvements to the performance of Kitura when running on SwiftNIO.</p>\n<p>Kitura 2.6 contains the following enhancements:</p>\n<ul>\n<li>Consistent handling of parameters for Codable routes #1310</li>\n<li>Initialize TypesafeMiddleware first #1350</li>\n<li>Allow Kitura welcome page to be disabled #1344</li>\n<li>Performance improvement when sending Strings #1369</li>\n<li>Conditional GET using etags #1333</li>\n</ul>\n<p>Thank you to everyone in the community who contributed to this release.</p>\n<h3 id=\"kituranio\"><a href=\"#kituranio\" aria-label=\"kituranio permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KituraNIO</h3>\n<p>A couple of obvious bottlenecks have been resolved – PR #112 and PR #113. These led to performance improvements of up to 30% on some benchmarks. A few more obvious bottlenecks do still exist and their solutions are in progress (e.g PR #117). KituraNIO now performs better than KituraNet on the <code class=\"language-text\">plaintext</code> benchmark. Longstanding stress tests were also run to make sure Kitura-NIO is stable over time. We feel that Kitura-NIO is ready for real-world usage and encourage users to try it out.</p>\n<hr>\n<h2 id=\"announcing-kiturastudio\"><a href=\"#announcing-kiturastudio\" aria-label=\"announcing kiturastudio permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Announcing KituraStudio</h2>\n<p>We are pleased to announce the release of KituraStudio, a new IDE for Server-side Swift from the SCADE team.</p>\n<p>KituraStudio has built-in integration with Docker, allowing you to code, build, and run your Kitura application on Linux in one environment, on macOS. It also provides a modern editing experience with quick feedback loop, and support for SPM.</p>\n<p>We are excited to invite you to try out KituraStudio and the SCADE team are looking forward to receiving your feedback.</p>\n<p>Click here for full details.</p>\n<hr>\n<h2 id=\"realm-and-ibm-cloud-functions\"><a href=\"#realm-and-ibm-cloud-functions\" aria-label=\"realm and ibm cloud functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Realm and IBM Cloud Functions</h2>\n<p>We are pleased to announce a collaboration between Realm and IBM to bring the power of Realm to the flexibility and extensibility of IBM Cloud. This collaboration combines Realm’s capabilities for offline-first and zero-latency mobile applications with IBM’s Cloud and IBM Cloud Functions, enabling server-side triggers written in any language (including Swift!), for the real-time facilitation of arbitrary functions and application extensions. We have open-sourced a demo application and recorded a video of it, but this is just the beginning – this is purely an example demo, and the possibilities are endless.</p>\n<p>Click here for more information, and visit <a href=\"https://github.com/realm/realm-cloud-functions-demo\">https://github.com/realm/realm-cloud-functions-demo</a> to try the code out.</p>\n<hr>\n<h2 id=\"announcing-swift-kuery-30\"><a href=\"#announcing-swift-kuery-30\" aria-label=\"announcing swift kuery 30 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Announcing Swift-Kuery 3.0</h2>\n<p>We have recently released version 3.0 of Swift-Kuery along with version 2.0 of Swift-Kuery-PostgreSQL, SwiftKueryMySQL and Swift-Kuery-SQLite.</p>\n<p>The SwiftKuery API has had an overhaul and has been updated to be entirely asynchronous. You now pass callbacks to the API for establishing your connections and preparing statements in the same way as you do currently when executing your queries and transactions.</p>\n<p>Now that Swift-Kuery is entirely asynchronous we are ready for the future of Swift. The new APIs should transition seamlessly to async/await, and it should also be possible to take advantage of the new database drivers being discussed in the Swift Server Working Group.</p>\n<p>Click here for full information and how to migrate to the new version.</p>\n<hr>\n<h2 id=\"swift-jwt-30\"><a href=\"#swift-jwt-30\" aria-label=\"swift jwt 30 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift-JWT 3.0</h2>\n<p>We have just released version 3.0 of Swift-JWT, our library for creating, signing, and verifying JSON Web Tokens. This release adds Codable conformance to the JWTs for easy encoding and decoding. As a result, you can now use JWTs with Kitura’s Codable Routing feature. Furthermore, this release adds support for signing and verifying JWTs using the HMAC hash function.</p>\n<p>Click here for full information and how to migrate to the new version.</p>\n<hr>\n<h2 id=\"kitura-session-33\"><a href=\"#kitura-session-33\" aria-label=\"kitura session 33 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura-Session 3.3</h2>\n<p>Web application servers are generally “stateless” and handle HTTP requests independently. However, it’s common for a developer to want to link requests from the same user together in a session. A simple way to achieve this is by using a cookie to identify the user and associating data to that cookie. Kitura-Session allows you to implement this flow and, as of version 3.3, you can now directly store and retrieve Codable objects in users’ sessions.</p>\n<p>Click here for full information on this new feature.</p>","frontmatter":{"title":"Announcing Kitura 2.6 and more!","blurb":"We are delighted to announce the release of Kitura 2.6, the latest release of the popular open source Swift web framework.","date":"2018-12-18","path":"/blogs/announcing-kitura-2-6","author":"Ian Partridge"}},{"html":"<p>We have recently released version 3.0 of Swift-Kuery along with version 2.0 of Swift-Kuery-PostgreSQL, SwiftKueryMySQL and Swift-Kuery-SQLite. You can find a summary of the major changes below, for more detail on the changes please refer to the Swift-Kuery migration guide.</p>\n<h2 id=\"api-changes\"><a href=\"#api-changes\" aria-label=\"api changes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API changes</h2>\n<p>The SwiftKuery API has had an overhaul and has been updated to be entirely asynchronous.</p>\n<p>You now pass callbacks to the API for establishing your connections and preparing statements in the same way as you do currently when executing your queries and transactions.</p>\n<p>The API for retrieving results from the databases has also been updated to be asynchronous in style and you now pass a callback into the asRows function. A new API forEach has been added to allow iteration of the result set.</p>\n<hr>\n<p>Asynchronous API behaviour</p>\n<p>Previously the SwiftKuery API, while largely asynchronous in style, had underlying behaviour which was synchronous. In the SwiftKuery 3.0 and plugin updates the behaviour of the API has been reimplemented to be fully asynchronous.</p>\n<p>With this change all code using the SwiftKuery API needs to be written in an asynchronous style. For example if you previously had code that did not nest API calls within the previous calls completion handler, such as the example below, you would now see undefined behaviour as both execute calls could run in parallel:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// BAD CODE</span>\n<span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> myTable<span class=\"token punctuation\">)</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">//Handle result</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> newQuery <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> otherTable<span class=\"token punctuation\">)</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> newQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">//Handle result</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For this to work in an asynchronous environment subsequent tasks must be chained in the preceding task’s completion handler, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// CORRECT CODE</span>\n<span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> myTable<span class=\"token punctuation\">)</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">//Handle result</span>\n    <span class=\"token keyword\">let</span> newQuery <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> otherTable<span class=\"token punctuation\">)</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> newQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n        <span class=\"token comment\">//Handle result</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"reuse-table-definitions\"><a href=\"#reuse-table-definitions\" aria-label=\"reuse table definitions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reuse table definitions</h2>\n<p>We have added the ability to specify a name for the table created from your structs. This will minimise duplication of code when wanting to use several tables with the same definition. For example the following could be used to represent both a Customer and an Employeee:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Table</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> forename <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"forename\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"surname\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> address <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With the prior release you would need to define the same class twice naming it differently. Now you can simply name the table when you create it for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> customers <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"customers\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> employees <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"employees\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"mysql-8-support-and-linker-improvements\"><a href=\"#mysql-8-support-and-linker-improvements\" aria-label=\"mysql 8 support and linker improvements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL 8 support and linker improvements</h2>\n<p>The update also adds support for MySQL version 8 and removes the requirements for specifying additional flags at build, test and run time on newer Swift releases.</p>\n<p>MySQL version 8 includes some changes in the databases header files that were incompatible with version 5. We have updated the SwiftMySQL plugin to abstract these differences meaning the code you write will work on MySQL versions prior to and post 8.</p>\n<p>We have also added pkg-config support so you no longer have to specify additional flags on your swift commands so long as you are running a MySQL release later than 5.5.</p>\n<hr>\n<h2 id=\"example-usage\"><a href=\"#example-usage\" aria-label=\"example usage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example usage</h2>\n<p>Below is a sample function that can be used in a Kitura route to retrieve data from a database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">grades</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> result<span class=\"token punctuation\">.</span>success <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>asError <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: Unknown Error\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Build and execute your query here.</span>\n \n        <span class=\"token comment\">// First build query</span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">.</span>course<span class=\"token punctuation\">,</span> grades<span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> grades<span class=\"token punctuation\">)</span>\n \n        <span class=\"token comment\">// Execute query</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> resultSet <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>asResultSet <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>asError <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error executing query: Unknown Error\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error executing query: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> retString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> titles<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> titles <span class=\"token operator\">=</span> titles <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching column titles: Unknown Error\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching column titles: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> title <span class=\"token keyword\">in</span> titles <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">//The column names of the result.</span>\n                    retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>toLength<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> withPad<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> startingAt<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n \n                resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> row<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n                    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> row <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// A null row means we have run out of results unless we encountered an error</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching row: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\">// No error so all rows are processed, make final callback passing result.</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>retString<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> row <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> value <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">let</span> valueStr <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">)</span>\n                            <span class=\"token keyword\">let</span> padStr <span class=\"token operator\">=</span> valueStr<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>toLength<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> withPad<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> startingAt<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                            retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>padStr<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When called you will see results that look similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">course                             grade                              \nHow to build your first computer   99                                 \nHow to work at a rock quarry       71</code></pre></div>\n<p>The full example can be found in the Swift-Kuery-PostgreSQL GitHub repository within the Readme.md file.</p>\n<hr>\n<h2 id=\"future\"><a href=\"#future\" aria-label=\"future permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future</h2>\n<p>Now that Swift-Kuery is entirely asynchronous we are ready for the future of Swift. The new APIs should transition seamlessly to async/await, and it should also be possible to take advantage of the new database drivers being discussed in the Swift Server Working Group.</p>","frontmatter":{"title":"Announcing SwiftKuery 3.0","blurb":"We have recently released version 3.0 of Swift-Kuery along with version 2.0 of Swift-Kuery-PostgreSQL, SwiftKueryMySQL and Swift-Kuery-SQLite","date":"2018-12-18","path":"/blogs/announcing-swiftkuery-3-0","author":"Matt Kilner"}},{"html":"<p>Web application servers are generally “stateless” and handle HTTP requests independently. However, it’s common for a developer to want to link requests from the same user together in a session. A simple way to achieve this is by using a cookie to identify the user and associating data to that cookie. Kitura-Session allows you to implement this flow and, as of version 3.3, you can now directly store and retrieve Codable objects. This blog will describe Kitura-Session’s new capabilities and provide an example of using sessions with a Kitura server.</p>\n<h2 id=\"codable-kitura-session\"><a href=\"#codable-kitura-session\" aria-label=\"codable kitura session permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Codable Kitura-Session</h2>\n<p>Previously, if you wanted to save something in a Raw routing session, you would store it as an Any. This is not type safe since you could try and save objects the would fail to be serialized as JSON. Furthermore, when you retrieve the item you have to cast it to the type you expect. With the 3.3 release of Kitura-Session, you can store and retrieve Codable objects adding type safety and removing the need for explicit casting. To demonstrate how this improves usability, we will apply these changes to the sessions example from Kitura-Sample:</p>\n<h3 id=\"an-online-bookstore\"><a href=\"#an-online-bookstore\" aria-label=\"an online bookstore permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>An online Bookstore</h3>\n<p>This example simulates a website where users buy books. The user doesn’t want to have to select all their book at once so they add the book they are interested in to their shopping cart. This cart is shared between requests until the checkout. In server terms, the cart is our session, where we store the users selected Book models.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> author<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> rating<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"adding-a-book-to-the-shopping-cart\"><a href=\"#adding-a-book-to-the-shopping-cart\" aria-label=\"adding a book to the shopping cart permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding a book to the shopping cart</h3>\n<p>The user wants to add a book to their cart. They do this by sending a POST request with the book’s data to the server. The server receives the request, uses cookies to identify the user and adds the book to their session.</p>\n<p>In Kitura-Session 3.2 this would be done as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/session\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> inputBook <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> books <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">let</span> newBook<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> inputBook<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"author\"</span><span class=\"token punctuation\">:</span> inputBook<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rating\"</span><span class=\"token punctuation\">:</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>inputBook<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>newBook<span class=\"token punctuation\">)</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> books\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>inputBook<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Kitura-Session 3.3, we can pass the book from the request body straight into the session:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/session\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> inputBook <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>inputBook<span class=\"token punctuation\">)</span>\n    session<span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> books\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>inputBook<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This has removed the need to convert our model into a JSON dictionary, saving us from clunky boilerplate code.</p>\n<h3 id=\"viewing-your-shopping-cart\"><a href=\"#viewing-your-shopping-cart\" aria-label=\"viewing your shopping cart permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Viewing your shopping cart</h3>\n<p>Once the user has added a few books to their cart, they want to view all their books. The do this by sending a GET request to the server. Cookies identify the user again and all the books they previously saved in the session are returned to them.</p>\n<p>In Kitura-Session 3.2 this would be done as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/session\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> bookData <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> book <span class=\"token keyword\">in</span> bookData <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> bookName <span class=\"token operator\">=</span> book<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">let</span> bookAuthor <span class=\"token operator\">=</span> book<span class=\"token punctuation\">[</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">let</span> ratingString <span class=\"token operator\">=</span> book<span class=\"token punctuation\">[</span><span class=\"token string\">\"rating\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">let</span> bookRating <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>ratingString<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> newBook <span class=\"token operator\">=</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> bookName<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">:</span> bookAuthor<span class=\"token punctuation\">,</span> rating<span class=\"token punctuation\">:</span> bookRating<span class=\"token punctuation\">)</span>\n        books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>newBook<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Kitura-Session 3.3, by defining the type we expect from the session, we get our Codable model straight out of the session:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/session\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token operator\">?</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Even with a simple model, this has vastly reduced the amount of code required, added compile time safety and made our code easier to read!</p>","frontmatter":{"title":"Kitura-Session 3.3: Sharing Codable objects between a user’s requests","blurb":"This blog will describe Kitura-Session’s new capabilities and provide an example of using sessions with a Kitura server","date":"2018-12-18","path":"/blogs/codable-kitura-session","author":"Andrew Lees"}},{"html":"<p>We have just released version 3.0 of Swift-JWT, our library for creating, signing, and verifying JSON Web Tokens. This release adds Codable conformance to the JWTs for easy encoding and decoding. As a result, you can now use JWTs with Kitura’s Codable Routing feature. Furthermore, this release adds support for signing and verifying JWTs using the HMAC hash function. This blog post will explain the new APIs by demonstrating JWT authentication in Codable routes.</p>\n<h2 id=\"what-is-a-json-web-token\"><a href=\"#what-is-a-json-web-token\" aria-label=\"what is a json web token permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a JSON Web Token?</h2>\n<p>In short, a JWT is a small JSON payload consisting of a Header object, a Claims object and a signature. They are a self-contained way for securely transmitting information between parties. If you would like to know more about JWTs, please read our last blog post announcing the release of our Swift-JWT library or check out jwt.io.</p>\n<hr>\n<h2 id=\"importing-swift-jwt\"><a href=\"#importing-swift-jwt\" aria-label=\"importing swift jwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Importing Swift-JWT</h2>\n<p>Let’s start by adding Swift-JWT to the dependencies of a Kitura Server. If you don’t have a project set up, please follow the getting started guide to create one.</p>\n<ol>\n<li>In your Package.swift, add Swift-JWT 3.1.0 to the dependencies and targets:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// dependencies</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/IBM-Swift/Swift-JWT.git\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.1.0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// targets</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">target</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Application\"</span><span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"SwiftJWT\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ol start=\"2\">\n<li>Import the SwiftJWT library:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Inside Application.swift</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span></code></pre></div>\n<hr>\n<h2 id=\"returning-a-jwt-from-a-codable-route\"><a href=\"#returning-a-jwt-from-a-codable-route\" aria-label=\"returning a jwt from a codable route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Returning a JWT from a Codable route</h2>\n<p>We are going to write a Codable route will received a user’s name and returns a signed JWT String.</p>\n<ol>\n<li>We begin by defining the User and Access token structs:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">AccessToken</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> accessToken<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>Next, we write a Codable route that receives the user’s query and returns a JWT:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Inside app.postInit()</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/generateJWT\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> loginHandler<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// Inside App</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">loginHandler</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">AccessToken</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;PrivateKey>\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">AccessToken</span><span class=\"token punctuation\">(</span>accessToken<span class=\"token punctuation\">:</span> signedJWT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This route represents the “Login” route when using JWT authentication.\n– The user provides their name (at which point the server would usually authenticate them).\n– The server takes the user’s information and creates the JWT with their claims.\n– The server signs and encodes the JWT using a private key.\n– The server sends the signed JWT String back to the user</p>\n<ol start=\"3\">\n<li>Run your Kitura server and send a POST request to your route.</li>\n</ol>\n<p>There are many utilities for testing REST APIs, such as Postman. Here we’ll use “curl”, which is a simple command line utility:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST \\\n  http://localhost:8080/generateJWT \\\n  -d &#39;{&quot;name&quot;:&quot;Joe Bloggs&quot;}&#39; \\\n  -H &#39;content-type: application/json&#39;</code></pre></div>\n<p>You should be sent back an access token which looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJLaXR1cmEiLCJzdWIiOiJKb2UgQmxvZ2dzIn0.Q2UbWSsU-AecEBBNBWr2NiqJdeV2OQF43yQZhXF0LB4</code></pre></div>\n<p>This is a signed JSON Web Token. If you would like to view its headers and claims, you can decode it at jwt.io/.</p>\n<hr>\n<h2 id=\"authenticating-a-user-using-a-jwt-in-a-codable-route\"><a href=\"#authenticating-a-user-using-a-jwt-in-a-codable-route\" aria-label=\"authenticating a user using a jwt in a codable route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authenticating a User using a JWT in a Codable route</h2>\n<p>The signed JWT is the user’s credentials and should be protected in the same way as a password. The user can then send the JWT in their Authentication header so the server knows who is making the request. We will now write a protected route that will only respond to an authenticated user.</p>\n<ol>\n<li>Create a TypeSafeMiddleware to extract the JWT:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">TypeSafeJWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Claims</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeMiddleware</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> jwt<span class=\"token punctuation\">:</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span>\n     \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterRequest</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterResponse</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">TypeSafeJWT</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> auth <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> authParts <span class=\"token operator\">=</span> auth<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> maxSplits<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            authParts<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n            authParts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Bearer\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;PrivateKey>\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">let</span> jwt <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span>C<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jwtString<span class=\"token punctuation\">:</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>authParts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token function\">TypeSafeJWT</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This middleware will:\n– Read the JWT string from the “Authorization” header of the request.\n– Verify the JWT signature (Ensuring we created the JWT and it hasn’t been altered)\n– Decode the JWT from the string</p>\n<p>Because HMAC is a symmetric algorithm, the JWT is verified using the same key that it was signed with.</p>\n<ol start=\"2\">\n<li>Create a Codable route, protected by JWT authentication:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Inside App.PostInit</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/protected\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> protected<span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// Inside App</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">protected</span><span class=\"token punctuation\">(</span>typeSafeJWT<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeJWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> userName <span class=\"token operator\">=</span> typeSafeJWT<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>sub <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>Run your Kitura server and send a GET request to the protected route.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -i http://localhost:8080/protected</code></pre></div>\n<p>You should receive an 401 Unauthorized status code back.</p>\n<p>Now send a request using a JWT from the generateJWT route:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -i -H &quot;Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJLaXR1cmEiLCJzdWIiOiJKb2UgQmxvZ2dzIn0.Q2UbWSsU-AecEBBNBWr2NiqJdeV2OQF43yQZhXF0LB4&quot; http://localhost:8080/protected</code></pre></div>\n<p>The name from the JWT will be returned to you. If you change the JWT token or generate one using a different key then it will be rejected by the server.</p>","frontmatter":{"title":"Swift-JWT 3.0: Codable JSON web tokens","blurb":"We have just released version 3.0 of Swift-JWT, our library for creating, signing, and verifying JSON Web Tokens","date":"2018-12-18","path":"/blogs/swift-jwt-3-0-codable-json-web-tokens","author":"Andrew Lees"}},{"html":"<p>We have rewritten the Kitura Sample demo application to better showcase the capabilities of Kitura. This update adds interactive webpages so you can try out the features live. You can also easily view the code for each feature by clicking on the embedded links.</p>\n<p>Furthermore, we have added new demos for popular features such as databases, sessions and authentication. Altogether, these changes produce an example app which is a great resource for learning to develop using Kitura.</p>\n<h2 id=\"swift-server-example\"><a href=\"#swift-server-example\" aria-label=\"swift server example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Server example</h2>\n<p>Our sample server shows off the following features available in Kitura:</p>\n<ul>\n<li>Hello World example with Raw routing</li>\n<li>Building REST APIs with Codable routing</li>\n<li>Persisting objects to a session store using Kitura-Session</li>\n<li>Rendering HTML web pages from Markdown and Stencil templates</li>\n<li>HTTP Basic authentication with Kitura-Credentials</li>\n<li>OAuth2 authentication with AppID, Facebook and Google</li>\n</ul>\n<hr>\n<h2 id=\"running-kitura-sample\"><a href=\"#running-kitura-sample\" aria-label=\"running kitura sample permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running Kitura Sample</h2>\n<p>To start the Swift server example locally, follow the steps below:</p>\n<ol>\n<li>Open your terminal window</li>\n<li>\n<p>Clone the Kitura Sample project:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/IBM-Swift/Kitura-Sample.git</code></pre></div>\n</li>\n<li>\n<p>Move into the Kitura-Sample directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd Kitura-Sample</code></pre></div>\n</li>\n<li>\n<p>Run the example server and wait while the code compiles:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">swift run</code></pre></div>\n</li>\n<li>Open your browser at <a href=\"http://localhost:8080\">http://localhost:8080</a>.</li>\n</ol>\n<p>You should see the Kitura-Sample website being run by the server.</p>\n<hr>\n<h2 id=\"interacting-with-the-app\"><a href=\"#interacting-with-the-app\" aria-label=\"interacting with the app permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interacting with the app</h2>\n<p>You can access all the Kitura-Sample demos via the menu on the left hand side. The inner page will provide you with a demonstration description, any further set-up required, and the method of interacting with the server. We then encourage you to view the relevant code on Github or within your local Kitura-Sample project. This sample also includes example tests for the routes and has used Kitura-OpenAPI to auto-generate an OpenAPI (AKA Swagger) file as well as an OpenAPI user interface.</p>\n<p>We hope you enjoy trying out our new Swift server example and it helps you to understand and use the features of Kitura. If you have any questions or comments, Please join the vibrant Kitura community on Slack!</p>","frontmatter":{"title":"Kitura Sample: A Swift Server example demonstrating the features of Kitura.","blurb":"We have rewritten the Kitura Sample demo application to better showcase the capabilities of Kitura","date":"2018-10-02","path":"/blogs/kitura-swift-server-example","author":"Andrew Lees"}},{"html":"<p>Authorisation is an important part of any web service, and JSON Web Tokens, or JWTs, have risen in popularity in recent years and serve as an alternative to cookies and OAuth tokens. Swift-JWT is a new, powerful Swift library for creating, signing, and verifying JWTs, and it works seamlessly with Kitura.</p>\n<h2 id=\"introduction-to-json-web-tokens\"><a href=\"#introduction-to-json-web-tokens\" aria-label=\"introduction to json web tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction to JSON Web Tokens</h2>\n<p>As a brief introduction to JWTs for those who have never come across them before, they are a small JSON payload consisting of a Header object, a Claims object and a signature.</p>\n<p>The Header object describes the JWT type and the algorithm used. It is then Base64 Encoded.</p>\n<p>The Claims object has fields that are either Registered, Public or Private. A full list of the Registered claims can be found here. Registered claims tend to be interoperable and predefined, whereas Public and Private claims are created by the developer implementing the JWT. Public claims should be used according to the IANA JWT Registry to avoid namespace collisions. Finally, Private claims would be those specific to your application, and are not always needed. An example could be a field marking JWT bearer as an administrator. This is then also Base64Encoded and appended to the Header using a single period (.).</p>\n<p>Lastly, a signature is generated by using a combination of the encoded header, claims, a secret and is then signed using the algorithm specified in the Headers ‘alg’ field. This is appended to the end of the JWT, forming three parts separated by periods. The signature can be left blank if the JWT requires no authentication. For more on JWTs, I recommend the JWT.io website.</p>\n<p>Now may be a good time to point out that this blog will focus on signed JWTs, not encrypted ones. JSON Web Signature (JWS) and JSON Web Encryption (JWE) are similar but differ in their use cases and implementations. Swift-JWT supports JWS only. The JWTs created with it cannot be tampered with, because changing the Header or Claims will change the signature of the JWT, invalidating it. However, as the Claims are only Base64 Encoded, they are readable to anyone, but because the Signature can only be validated with public key associated with the private key that signed it, you can trust the token.</p>\n<p>The main benefit of using a JWT is that they are self contained. There is no overhead required, no database lookups, and they can be sent in URLs and HTTP headers. They are also lightweight and human parsable, as they come in JSON format. This means they can be handled easily by applications dealing with JSON. Now we have some priory surrounding JWTs, we can take a look at the API for Swift-JWT.</p>\n<hr>\n<h2 id=\"using-swift-jwt\"><a href=\"#using-swift-jwt\" aria-label=\"using swift jwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Swift-JWT</h2>\n<p>First add the Swift-JWT library to your Package.swift and import it into your project. The library works on Swift 4 and later.</p>\n<p>In my example, I will be using a public/private key pair created on the macOS command line, using OpenSSL and ssh-keygen utilities. The command I used is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh-keygen -t rsa -b 4096 -f jwtRS256.key\n# Don&#39;t add a passphrase\nopenssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub</code></pre></div>\n<p>The reason for not adding a passphrase is because this encrypts the key, meaning Swift-JWT can’t read its contents. I then place the files generated into a subdirectory of my Swift project, in the root directory, and call this new directory JWT.</p>\n<p>The data from the file must be parsed into a local variable in Swift so we can use it to instantiate a new JWT object. To do this, we create a URL object pointing to the file and then then create a Data object with the contents of the URL.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> myKeyPath <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span>relativePath<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/jwt/jwtRS256.key\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> myKeyPath<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>alwaysMapped<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now the JWT is ready to be created. To do this, you can do the whole thing in one call or create the components separately and then make the JWT at the end. If you are adding a lot of claims to your JWT I would recommend the latter approach for readability.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">:</span> <span class=\"token function\">Header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>typ<span class=\"token punctuation\">:</span><span class=\"token string\">\"JWT\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>alg<span class=\"token punctuation\">:</span><span class=\"token string\">\"rsa256\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \nclaims<span class=\"token punctuation\">:</span> <span class=\"token function\">Claims</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">:</span><span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>jti<span class=\"token punctuation\">:</span>”probableRandomString<span class=\"token string\">\", .iss:”websiteName\"</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">.</span>aud<span class=\"token punctuation\">:</span><span class=\"token string\">\"anyone\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">:</span>”emailOfCLIENT<span class=\"token string\">\", .iat:\"</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">15</span><span class=\"token operator\">/</span><span class=\"token number\">2018</span><span class=\"token string\">\", .exp:\"</span><span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">15</span><span class=\"token operator\">/</span><span class=\"token number\">2019</span>\"<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">.</span>nbf<span class=\"token punctuation\">:</span>”<span class=\"token number\">03</span><span class=\"token operator\">/</span><span class=\"token number\">14</span><span class=\"token operator\">/</span><span class=\"token number\">2018</span>”<span class=\"token punctuation\">,</span> “customClaim”<span class=\"token punctuation\">:</span>”admin<span class=\"token operator\">=</span><span class=\"token constant\">YES</span>”<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There’s quite a lot going on here so to break it up, we will look at the individual parts of the JWT. First, we create the Header, which takes a .typ parameter of JWT to tell whatever application this is passed into that the contents are a signed JWT (JWS) and not JWE. The .alg field then shows that this is JWS was signed using the RSA256 algorithm.</p>\n<p>The Claims are then created. There are several library provided claims used here, which are defined in the RFC specification, and many are optional. Keep the JWT lightweight and only implement the ones that make sense to your application. In my example, we define a name as “Kitura”, a unique ID for this JWT as “probableRandomString” and so on. For a full list of the available registered claims included, see the file Claims.swift. You can also define your own Claims, known as private claims, which would be application specific using a String as the name of the Claim, as shown above with the customClaim claim.</p>\n<p>We now need to sign the JWT using the private key we made in the terminal. To do this, we run:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Note: You can use a public/private key pair or a certificate to sign a JWT.</span>\n<span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">rs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>privateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We create a new JWT that is composed of the three components: a Base64 Encoded Header, Claims object and signature made of the combined two and the key. Someone with access to the public key would then be able to reverse the encoding and verify the signature. The header and claims would be decipherable without the key, as they are only encoded, not encrypted. The signature on the end verifies the validity of the JWT object and allows it to be implicitly trusted.</p>\n<p>A server can send this signed JWT in Kitura with:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"jwt=<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>signedJWT<span class=\"token delimiter variable\">)</span></span>\"</span></code></pre></div>\n<p>A common use case would have a server issuing signed JWTs that a client saves to their local storage. At sometime in the future, the client makes a request and sends the JWT in the Authorisation Header of their HTTP request. The server can use the public key that goes with it’s private key to verify it did make the token using the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Inside a route handler for a raw route that requires authentication</span>\n<span class=\"token keyword\">let</span> receivedJWT <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">:</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> receivedJWT <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jwt\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> separator <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>seperator<span class=\"token punctuation\">:</span> <span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span>\n        jwt <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> newArray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This logic receives a full list of the cookies saved on the client’s system, but we are only interested in the the JWT so we parse it and end with <code class=\"language-text\">cookie</code> storing the value of the received, signed JWT. Now we can verify the JWT was signed by us, and access its Claims. To start, we need to store the public key as a variable we can access in Swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> myPublicKeyPath <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span>relativePath<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/jwt/jwtRS256.key.public\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> publicKey<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>contentsOf<span class=\"token punctuation\">:</span> myPublicKeyPath<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>alwaysMapped<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we have it in memory, we can use it to verify the JWT was signed by us, and then use its Claims.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> verifyJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token constant\">JWT</span><span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">,</span> using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">rs256</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>publicKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">if</span> verifyJWT <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> decodedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token constant\">JWT</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Library provided method for checking expiration, audience etc.</span>\n        <span class=\"token keyword\">let</span> claim <span class=\"token operator\">=</span> decodedJWT<span class=\"token punctuation\">.</span><span class=\"token function\">validateClaim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">switch</span> claim <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// Do something if the JWT is valid and trusted.</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>failure<span class=\"token punctuation\">:</span>\n            <span class=\"token comment\">// Do something if the JWT is invalid but trusted (i.e. expired)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error decoding JWT\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// Do something as JWT was tampered with or not signed by us  </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In just a few lines of code, we have received a JWT from the client, checked that we signed it, and checked the validity of the Claims. You can pass an issuer: and audience: parameter into the validateClaims method to check against them. The other claims are only assessed if they are present, if the JWT did not contain them they are skipped.</p>\n<p>Inside the success case is where the logic for your application would go for a successful login. The failure case let’s you deal with cases where the token may be expired or for the wrong audience or issuer and the initial verification lets you be sure you issued the original JWT and it has not been tampered with.</p>\n<hr>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>The Swift-JWT library will be adding new signing algorithms and use cases as time goes on, and we have added some Claims specific to certain specifications such as MicroProfile. We will also be adding a demo of Swift-JWT to Kitura-Sample, with an example of a simple login and logged-in-user only route and handling on unauthorised access attempts.</p>","frontmatter":{"title":"JSON Web Tokens with Swift-JWT","blurb":"Swift-JWT is a new, powerful Swift library for creating, signing, and verifying JWTs, and it works seamlessly with Kitura","date":"2018-09-02","path":"/blogs/swift-jwt","author":"Kye Maloy"}},{"html":"<p>Kitura 2.5 has recently been released – the latest update to the popular and powerful Swift web framework.</p>\n<h2 id=\"enhanced-openapi-support\"><a href=\"#enhanced-openapi-support\" aria-label=\"enhanced openapi support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enhanced OpenAPI support</h2>\n<p>Kitura 2.4 introduced support for OpenAPI (also known as Swagger), the most popular way to document REST APIs. When you use Codable routing in Kitura you can automatically generate an OpenAPI definition of your running application, with no code changes or annotations needed.</p>\n<p>In Kitura 2.5 we have expanded our support of the OpenAPI specification, and now also support routes which specify query parameters. In addition, a new release of Kitura-OpenAPI now includes the latest version of SwaggerUI, plus some bugfixes.</p>\n<hr>\n<h2 id=\"swiftnio-support\"><a href=\"#swiftnio-support\" aria-label=\"swiftnio support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SwiftNIO support</h2>\n<p>Kitura 2.4 introduced experimental support for running Kitura on SwiftNIO, the new asynchronous networking framework from Apple. Users could opt to in to trying SwiftNIO by using swift package edit to choose a separate branch of Kitura which we maintained.</p>\n<p>Now, in Kitura 2.5 SwiftNIO support has been integrated into Kitura itself, and you can easily choose to opt in to using SwiftNIO if you want.</p>\n<p>To do this, simply build your Kitura application with swift build -DKITURA_NIO=1.</p>\n<p>We encourage all users to try building and running their applications with SwiftNIO and let us know their experiences. We are continuing to work closely with the SwiftNIO team on any issues that we find, and thank them for their quick responses, help, and fixes so far.</p>\n<hr>\n<h2 id=\"swiftnio-support-in-kitura-websocket\"><a href=\"#swiftnio-support-in-kitura-websocket\" aria-label=\"swiftnio support in kitura websocket permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SwiftNIO support in Kitura-WebSocket</h2>\n<p>If you are using Websockets in Kitura, you may be interested to know that we also now have an experimental port of Kitura-WebSocket which runs on SwiftNIO. You can find it at this branch and we would welcome all users to try it out. Join our Slack and let us know how you get on!</p>\n<hr>\n<h2 id=\"pluggable-jsonencoders-in-codable-routing\"><a href=\"#pluggable-jsonencoders-in-codable-routing\" aria-label=\"pluggable jsonencoders in codable routing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pluggable JSONEncoders in Codable routing</h2>\n<p>Codable routing allows you to quickly build REST APIs using the Codable types that already exist in your application.</p>\n<p>Until now, Codable routing has been limited to JSON only, and only the default JSONEncoder and JSONDecoder supplied by Foundation.</p>\n<p>Now in Kitura 2.5 you have a flexible framework for attaching custom encoders and decoders to the Kitura router.</p>\n<p>Learn more in this blog post.</p>\n<hr>\n<h2 id=\"performance-improvements\"><a href=\"#performance-improvements\" aria-label=\"performance improvements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance improvements</h2>\n<p>We have continued to improve the overall performance of Kitura. In certain benchmarks Kitura 2.5 is 13% faster than Kitura 2.4. The difference is even greater when running in debug mode.</p>\n<p>We intend to continue to improve Kitura performance in future.</p>\n<hr>\n<h2 id=\"new-splash-screen\"><a href=\"#new-splash-screen\" aria-label=\"new splash screen permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>New splash screen</h2>\n<p>In Kitura 2.5 the default splash screen matches the look and feel of www.kitura.io</p>\n<hr>\n<h2 id=\"bugfixes\"><a href=\"#bugfixes\" aria-label=\"bugfixes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bugfixes</h2>\n<p>Of course, there’s the usual selection of tweaks and fixes, resolving issues reported to us by the community.</p>","frontmatter":{"title":"Announcing Kitura 2.5","blurb":"Kitura 2.5 has recently been released – the latest update to the popular and powerful Swift web framework.","date":"2018-09-01","path":"/blogs/announcing-kitura-2-5","author":"Ian Partridge"}},{"html":"<p>Codable routing allows you to quickly build REST APIs that work directly with concrete Swift types. Kitura achieves this by using the Codable protocol to encode and decode the body of HTTP requests. In Kitura 2.5, we have added the ability to customize the JSON encoders and decoders used by your router. Furthermore, you can add your own custom encoders and decoders. This allows your routes to handle other data serializations if you want, such as YAML, XML and MessagePack.</p>\n<h2 id=\"bodyencoder-and-bodydecoder\"><a href=\"#bodyencoder-and-bodydecoder\" aria-label=\"bodyencoder and bodydecoder permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BodyEncoder and BodyDecoder</h2>\n<p>We’ve added two new protocols called BodyEncoder and BodyDecoder that encapsulate the ability to change Codable types to and from Data.</p>\n<p>A class that conforms to BodyEncoder must be able to encode an Encodable type into Data:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">BodyEncoder</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> encode<span class=\"token operator\">&lt;</span>T <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Encodable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> value<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Data</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A class that conforms to BodyDecoder must be able to decode data into a Decodable type:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">BodyDecoder</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> decode<span class=\"token operator\">&lt;</span>T <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Decodable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> type<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> from data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> T\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kitura extends JSONEncoder/JSONDecoder as well as QueryEncoder/QueryDecoder to conform to BodyEncoder/BodyDecoder. As a result, these coders are usable out of the box. Other encoders/decoders can be made to conform to this protocol so that the Kitura router can use them.</p>\n<hr>\n<h2 id=\"mediatype\"><a href=\"#mediatype\" aria-label=\"mediatype permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MediaType</h2>\n<p>The media type (formerly known as MIME type) is a two-part identifier that is separated by a forwards slash (e.g. “text/plain”). We have added a MediaType struct to Kitura that represents media type. This is used for selecting an encoder or decoder based on the media type identified in the Accepts or Content-Type HTTP headers. You can initialize a MediaType in three ways:</p>\n<ul>\n<li>\n<p>From a raw media type string</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token function\">MediaType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>By providing the type and sub type</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token function\">MediaType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> subtype<span class=\"token punctuation\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>Using a static helper initializer for certain popular media types</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token builtin\">MediaType</span><span class=\"token punctuation\">.</span>json</code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"custom-encoders-and-decoders-on-the-router\"><a href=\"#custom-encoders-and-decoders-on-the-router\" aria-label=\"custom encoders and decoders on the router permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Encoders and Decoders on the Router</h2>\n<p>From Kitura 2.5, the Router class has two extra properties: dictionaries called encoders and decoders.</p>\n<p>The encoders dictionary maps MediaType keys to closures for generating a BodyEncoder. On initialization, the dictionary includes a JSONEncoder() generator for “application/json”.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> encoders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">MediaType</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">BodyEncoder</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>You can send a Codable object from a route either by calling send(_ obj: T) from a RouterResponse or by using a Codable route. When this happens the Router will select the correct encoder based on the Accepts header of the Request. If the request doesn’t have an Accepts header or it doesn’t include any MediaTypes from your dictionary, the router’s defaultResponseMediaType will determine the encoder.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> defaultResponseMediaType<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MediaType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>The decoders dictionary maps MediaType keys to closures for generating a BodyDecoder. On initialization, the dictionary includes a JSONDecoder() generator for “application/json” and a QueryDecoder() generator for “application/x-www-form-urlencoded”.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> decoders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">MediaType</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">BodyDecoder</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>urlEncoded<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">QueryDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>You can read a Codable object in a route either by calling read(as type: T.Type) from a RouterRequest or by using a Codable route. When this happens the Router will select the correct decoder based on the Content-Type header of the request.</p>\n<p>You can add custom encoders and decoders to your router by adding BodyEncoders/BodyDecoders to these dictionary with the MediaType you would like them to encode/decode. You can also replace the existing JSONEncoder and JSONDecoder generators to customize how your Kitura router handles JSON.</p>\n<hr>\n<h2 id=\"adding-other-data-serializations\"><a href=\"#adding-other-data-serializations\" aria-label=\"adding other data serializations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding other data serializations</h2>\n<p>The following data serialization formats already have existing Swift packages which implement them using Codable:</p>\n<ul>\n<li>YAML</li>\n<li>XML</li>\n<li>BSON</li>\n<li>Property Lists</li>\n<li>MessagePack</li>\n</ul>\n<p>To use one of these custom encoders and decoders:</p>\n<ol>\n<li>Follow the corresponding link above.</li>\n<li>Import the repository to your Kitura project.</li>\n<li>Extend their Encoder/Decoder Class to conform to BodyEncoder/Decoder.</li>\n<li>Add the encoder/decoder and its MediaType to your encoder and decoder dictionary</li>\n</ol>\n<hr>\n<h2 id=\"example-customizing-the-json-encoder\"><a href=\"#example-customizing-the-json-encoder\" aria-label=\"example customizing the json encoder permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Customizing the JSON encoder</h2>\n<p>JSON is the most common data serialization technique and Kitura uses it by default for its Codable routes. The JSONEncoder class includes options to customize its encoding strategy. In this example we will show you how to set your Kitura router to send pretty printed JSON from a Codable route.</p>\n<ol>\n<li>In the terminal, using the Kitura command-line interface, generate a basic Kitura server:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir ~/customCoders\ncd ~/customCoders\nkitura init\nopen customCoders.xcodeproj/</code></pre></div>\n<ol start=\"2\">\n<li>Open Sources > Application > Application.swift</li>\n<li>Add a Hello struct after the App class:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Hello</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hello<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> from<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>Construct a Codable route:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Hello</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>In the top left corner of Xcode you should see a small toolbox icon with the text “customCoders-Package” next to it. Click this icon and then click “customCoders” from the dropdown menu.</li>\n<li>Go to <a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></li>\n</ol>\n<p>You will see the hello message printed as standard JSON.</p>\n<ol start=\"7\">\n<li>After initializeMetrics(router: router) create your custom JSONEncoder() generator:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> jsonEncoderGenerator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">BodyEncoder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> encoder <span class=\"token operator\">=</span> <span class=\"token function\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    encoder<span class=\"token punctuation\">.</span>outputFormatting <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>prettyPrinted\n    <span class=\"token keyword\">return</span> encoder\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"8\">\n<li>replace the router’s JSONEncoder with your new one:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span>encoders<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jsonEncoderGenerator</code></pre></div>\n<ol start=\"9\">\n<li>Restart your project and go to <a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></li>\n</ol>\n<p>The hello message will now be pretty printed JSON.</p>","frontmatter":{"title":"Pluggable JSON encoders in Kitura 2.5","blurb":"In Kitura 2.5, we have added the ability to customize the JSON encoders and decoders used by your router","date":"2018-09-01","path":"/blogs/kitura-custom-encoders-and-decoders","author":"Andrew Lees"}},{"html":"<p>We’re very pleased to announce the release of Kitura 2.4, the latest update to the Kitura web framework. Kitura 2.4 brings full support for Swift 4.2, plus a large number of new features and enhancements.</p>\n<h2 id=\"type-safe-middlewares\"><a href=\"#type-safe-middlewares\" aria-label=\"type safe middlewares permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe middlewares</h2>\n<p>Kitura 2.0 introduced Codable routing, a powerful way to quickly build REST APIs from the Swift datatypes you already have in your application. Kitura 2.1, 2.2, and 2.3 enhanced Codable routing further, bringing features like Codable support for URL query parameters and URL-encoded HTML forms.</p>\n<p>Now in Kitura 2.4 you can write a new kind of middleware and associate it with your Codable routes. We’re providing support for type-safe Sessions and Authentication for you, but you can use type-safe middlewares for anything you want.</p>\n<hr>\n<h2 id=\"swagger-support\"><a href=\"#swagger-support\" aria-label=\"swagger support permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swagger support</h2>\n<p>Swagger, also known as OpenAPI, is the most popular way to document RESTful web services. The Swagger ecosystem provides a broad range of tools and services for developers across the API lifecycle.</p>\n<p>For a long time, the Kitura server generator enabled developers to generate a Kitura application from a provided Swagger document.</p>\n<p>Now, Kitura has native support for generating a Swagger document from the currently running application, and a new Kitura-OpenAPI package makes adding a Swagger endpoint and SwaggerUI to your application one line of code.</p>\n<hr>\n<h2 id=\"kitura-on-swiftnio\"><a href=\"#kitura-on-swiftnio\" aria-label=\"kitura on swiftnio permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura on SwiftNIO</h2>\n<p>SwiftNIO is a new framework for writing high-performance network applications in Swift. Kitura 2.4 brings experimental support for running Kitura on SwiftNIO, including support for both Linux and macOS. We invite the community to explore this new technology and give us feedback.</p>\n<hr>\n<h2 id=\"type-safe-templating\"><a href=\"#type-safe-templating\" aria-label=\"type safe templating permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe templating</h2>\n<p>Web applications are an important use-case for Kitura, and in Kitura 2.4 we’ve enhanced our templating APIs so they support easy rendering of Codable structures. Many thanks go to Steven van Impe from the Kitura community who contributed valuable ideas and code to this new feature.</p>\n<hr>\n<h2 id=\"other-features\"><a href=\"#other-features\" aria-label=\"other features permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other features…</h2>\n<p>Kitura 2.4 also comes with a slew of other minor improvements and fixes, including:</p>\n<h3 id=\"easily-decode-query-parameters-in-raw-routes-1215\"><a href=\"#easily-decode-query-parameters-in-raw-routes-1215\" aria-label=\"easily decode query parameters in raw routes 1215 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easily decode query parameters in raw routes (#1215)</h3>\n<p>A new request.getQueryParameters() function allows Kitura users to easily decode incoming query parameters to a Codable QueryParams structure.</p>\n<h3 id=\"decode-comma-separated-query-parameters-1238\"><a href=\"#decode-comma-separated-query-parameters-1238\" aria-label=\"decode comma separated query parameters 1238 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Decode comma-separated query parameters (#1238)</h3>\n<p>A new request.queryParametersMultiValues property for decoding comma-separated query parameters into an array of strings automatically.</p>\n<h3 id=\"extra-codable-routing-api-1253\"><a href=\"#extra-codable-routing-api-1253\" aria-label=\"extra codable routing api 1253 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extra Codable routing API (#1253)</h3>\n<p>Previously it was not possible to return a single Codable object from a Codable GET route with query parameters. We’ve added this extra API so it’s now possible, as this pattern was observed in some existing REST APIs.</p>\n<h3 id=\"userinfo-in-routerresponse-1259\"><a href=\"#userinfo-in-routerresponse-1259\" aria-label=\"userinfo in routerresponse 1259 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>userInfo in RouterResponse (#1259)</h3>\n<p>For a long time we’ve provided a public dictionary in RouterRequest to allow Kitura users to stash arbitrary user data. Now we also provide this on RouterResponse, to provide API symmetry and help those users who write extensions on RouterResponse.</p>\n<h3 id=\"asraw-property-on-parsedbody-1258\"><a href=\"#asraw-property-on-parsedbody-1258\" aria-label=\"asraw property on parsedbody 1258 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>asRaw property on ParsedBody (#1258)</h3>\n<p>Now you can decode body data as a <code class=\"language-text\">Data?</code> easily via a new <code class=\"language-text\">asRaw</code> property. This provides nice symmetry with the existing <code class=\"language-text\">asJSON</code> and <code class=\"language-text\">asURLEncoded</code> properties.</p>","frontmatter":{"title":"Announcing Kitura 2.4","blurb":"We’re very pleased to announce the release of Kitura 2.4, the latest update to the Kitura web framework","date":"2018-08-01","path":"/blogs/announcing-kitura-2-4","author":"Ian Partridge"}},{"html":"<h2 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>In the 2.4 release of Kitura, we introduced a facility called Type-Safe Middleware, and with it two conforming implementations: Sessions and Credentials.</p>\n<p>If you need to authenticate users of your API, you can use Credentials to specify a middleware when registering your Codable route handler. The handler is invoked only after successful authentication, and an instance of that middleware provides convenient and type-safe access to the user’s profile.</p>\n<p>With the release of Type-Safe Credentials, we provided a type-safe implementation of HTTP Basic authentication. We’re now pleased to introduce two additional forms of authentication: Google and Facebook OAuth tokens.</p>\n<p>In addition, a new  TypeSafeMultiCredentials  protocol allows a single route handler to accept multiple forms of authentication.</p>\n<hr>\n<h2 id=\"authentication-using-oauth-tokens\"><a href=\"#authentication-using-oauth-tokens\" aria-label=\"authentication using oauth tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Authentication using OAuth Tokens</h2>\n<p>A number of service providers support access delegation using OAuth tokens: an ability for a subject to share elements of their user profile with your application, without specifying a password. The token grants the bearer limited access to the subject’s profile – such as to obtain their user id, name or e-mail address.</p>\n<p>The token also acts as proof that the subject is who they claim to be: in order to generate the token, they must have successfully logged into that service provider, and consented to share information with your application.</p>\n<p>Let’s take a look at how we can handle authentication using OAuth tokens from two providers: Google and Facebook.</p>\n<h3 id=\"google-oauth-token\"><a href=\"#google-oauth-token\" aria-label=\"google oauth token permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Google OAuth Token</h3>\n<p>Kitura-CredentialsGoogle makes it simple to create a type-safe middleware that authenticates an incoming request against Google’s OAuth2 userinfo API.</p>\n<p>Start by declaring a dependency on  Kitura-CredentialsGoogle  in your  Package.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> package <span class=\"token operator\">=</span> <span class=\"token function\">Package</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/IBM-Swift/Kitura-CredentialsGoogle.git\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.2.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  targets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">target</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span>\n            dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CredentialsGoogle\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>and import the dependency within your application:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsGoogle</span></code></pre></div>\n<p>To authenticate an incoming request that provides a Google OAuth token, you can use the pre-defined  GoogleTokenProfile  type as a middleware when registering a Codable route handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/protected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">GoogleTokenProfile</span><span class=\"token punctuation\">,</span> \n        respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">GoogleTokenProfile</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n \n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Alternatively, you can customize this type by defining a conformance to the  TypeSafeGoogleToken  protocol:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsGoogle</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyGoogleUser</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeGoogleToken</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The  MyGoogleUser  type can then be substituted for the  GoogleTokenProfile  type, and will provide access to only the three fields declared.</p>\n<h3 id=\"facebook-oauth-token\"><a href=\"#facebook-oauth-token\" aria-label=\"facebook oauth token permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Facebook OAuth Token</h3>\n<p>Kitura-CredentialsFacebook defines the equivalent types for authenticating against Facebook’s Graph API.</p>\n<p>Start by declaring a dependency on  Kitura-CredentialsFacebook  in your  Package.swift:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> package <span class=\"token operator\">=</span> <span class=\"token function\">Package</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/IBM-Swift/Kitura-CredentialsFacebook.git\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.2.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  targets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">target</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> \n            dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CredentialsFacebook\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>To authenticate an incoming request that provides a Facebook OAuth token, you can use the pre-defined  FacebookTokenProfile  type as a middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsFacebook</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// Optionally, specify your Facebook App ID to only accept tokens that were</span>\n<span class=\"token comment\">// issued to your application.</span>\n<span class=\"token builtin\">FacebookTokenProfile</span><span class=\"token punctuation\">.</span>appID <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;your app id>\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/protected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">FacebookTokenProfile</span><span class=\"token punctuation\">,</span> \n         respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">FacebookTokenProfile</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n \n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, you can create a custom type by defining a conformance to the  TypeSafeFacebookToken  protocol:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsFacebook</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyFacebookUser</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeFacebookToken</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> appID<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;your app id>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, there are some key differences between the Google and Facebook methods that warrant some closer examination:</p>\n<ol>\n<li>Profile contents</li>\n</ol>\n<p>The Google userinfo API provides a fixed profile of information where the subject may optionally choose to share their e-mail address and gender. Requests to Google’s API do not specify which fields are desired: all granted fields are returned.</p>\n<p>In contrast, the Facebook Graph API requires you to specify which fields of a subject’s profile you wish to access. The token determines what subset of these fields have been granted to you by the subject.</p>\n<p>In order to determine which fields should be requested from Facebook, the  TypeSafeFacebook  protocol specifies a list of  validFieldNames  that can be requested from the API. The properties declared by your type are filtered against this list, and the resulting set requested from Facebook. The Facebook response is used to initialize those properties when a user is authenticated. Note that this requires all other properties of your type to be optional.</p>\n<p>The built-in list of field names is likely to be sufficient for most cases but can be overridden by your type if needed.</p>\n<ol start=\"2\">\n<li>App-scoped Identifiers and OAuth AppID verification</li>\n</ol>\n<p>The Facebook  id  field is application-scoped. This means that for a given subject, the value of their id is dependent on the OAuth app that was granted access. The value is still globally unique – meaning that the same value will not be assigned to a different subject in a different application scope.</p>\n<p>In order to establish the user’s identity in the context of your application, we first verify that the supplied token was issued to your App. If the App ID matches, then the token is used to retrieve the subject’s identity. However, if you do not specify a value for  appID , this verification will be skipped and any valid token will be accepted.</p>\n<h3 id=\"caching-of-tokens\"><a href=\"#caching-of-tokens\" aria-label=\"caching of tokens permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caching of Tokens</h3>\n<p>Rather than querying the service provider upon every incoming request, profiles are cached against their respective token using an in-memory cache.</p>\n<p>Note that there is a behavioral difference between profiles that are defined as structs or classes: if you declare your profile as a struct, changes are not persistent within the cache. If the profile type is a class, then if its properties are changed, the changes will be reflected upon subsequent retrievals from the cache. You should consider using a class type if you need to be able to modify the token profile type.</p>\n<hr>\n<h2 id=\"multiple-authentication-methods\"><a href=\"#multiple-authentication-methods\" aria-label=\"multiple authentication methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multiple authentication methods</h2>\n<p>The above examples show how to require a specific type of authentication to access a resource. However, it is common to accept multiple forms of authentication – such as tokens from multiple authentication providers.</p>\n<p>The  TypeSafeMultiCredentials  protocol provides a way to define a  TypeSafeMiddleware  that permits authentication against a list of methods – an array of  TypeSafeCredentials  types, such as the ones we defined above.</p>\n<p>To use this facility, define a type that conforms to the protocol. This requires that you define an  authenticationMethods  property that lists the permitted authentication methods, and an initializer that takes a  TypeSafeCredentials  parameter. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Credentials</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyMultiAuthedUser</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeMultiCredentials</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>                   <span class=\"token comment\">// Protocol requirement</span>\n    <span class=\"token keyword\">let</span> provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>             <span class=\"token comment\">// Protocol requirement</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>                 <span class=\"token comment\">// Custom property</span>\n    <span class=\"token keyword\">let</span> email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>               <span class=\"token comment\">// Custom, optional property</span>\n \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> authenticationMethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">TypeSafeCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">]</span> \n            <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">MyFacebookUser</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">MyGoogleUser</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span>\n \n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>successfulAuth<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeCredentials</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>id\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>provider <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>provider\n \n        <span class=\"token comment\">// Initialize additional properties based on authentication type.</span>\n        <span class=\"token keyword\">switch</span> successfulAuth <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> googleToken <span class=\"token keyword\">as</span> <span class=\"token builtin\">MyGoogleUser</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> googleToken<span class=\"token punctuation\">.</span>name\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> googleToken<span class=\"token punctuation\">.</span>email\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> facebookToken <span class=\"token keyword\">as</span> <span class=\"token builtin\">MyFacebookUser</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> facebookToken<span class=\"token punctuation\">.</span>name\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> facebookToken<span class=\"token punctuation\">.</span>email\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>id    <span class=\"token comment\">// Map id to name for HTTP Basic</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Note: the  MyBasicAuth  type represents HTTP Basic authentication, and the code can be found in the previous post: A new kind of Kitura middleware: type-safe and easy to use.</p>\n</blockquote>\n<p>This type can then be used in your Codable route handler, in the same way as before:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/multiAuthProfile\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MyMultiAuthedUser</span><span class=\"token punctuation\">,</span> \n         respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">MyMultiAuthedUser</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n \n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authenticated <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>userProfile<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">)</span></span> using <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>userProfile<span class=\"token punctuation\">.</span>provider<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"client-side-support-with-kiturakit\"><a href=\"#client-side-support-with-kiturakit\" aria-label=\"client side support with kiturakit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Client-side support with KituraKit</h2>\n<p>Support has also been added to KituraKit for supplying token or HTTP Basic credentials. The client now has a  defaultCredentials: ClientCredentials?  property that can be used to specify the credentials that should be supplied for each request from this client.</p>\n<p>As an example, let’s use KituraKit to retrieve the user profile corresponding to a set of credentials, using the /multiAuthProfile route we defined earlier. First we need a type to represent the profile information on the client side:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">AuthedUser</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we can define a set of default credentials – in this case, HTTP Basic – to be used when accessing the server:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraKit</span>\n \n<span class=\"token comment\">// Create a KituraKit client</span>\n<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token function\">KituraKit</span><span class=\"token punctuation\">(</span>baseURL<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to create client\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Assign default credentials to this client</span>\nclient<span class=\"token punctuation\">.</span>defaultCredentials <span class=\"token operator\">=</span> <span class=\"token function\">HTTPBasic</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token comment\">// Make a request using the default credentials</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/multiAuthProfile\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>returnedItem<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AuthedUser</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> \n        error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token keyword\">in</span>\n \n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> returnedItem <span class=\"token operator\">=</span> returnedItem <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to retrieve user profile with default credentials: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response with default credentials: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>returnedItem<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This results in the output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Response with default credentials: AuthedUser(id: &quot;John&quot;, provider: &quot;HTTPBasic&quot;, name: &quot;John&quot;, email: nil)</code></pre></div>\n<p>You can override the  defaultCredentials  for an individual request by specifying the  credentials: ClientCredentials?  parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> googleToken <span class=\"token operator\">=</span> <span class=\"token string\">\"abc123\"</span>  <span class=\"token comment\">// Your Google access token</span>\n \n<span class=\"token comment\">// Make a request using specific credentials</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/multiAuthProfile\"</span><span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">:</span> <span class=\"token function\">GoogleToken</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">:</span> googleToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>returnedItem<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AuthedUser</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token keyword\">in</span>\n \n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> returnedItem <span class=\"token operator\">=</span> returnedItem <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to retrieve user profile with Google token: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response with Google token: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>returnedItem<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This results in output corresponding to the Google profile information provided via the token:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Response with Google token: AuthedUser(id: &quot;1234567890&quot;, provider: &quot;Google&quot;, name: &quot;John Doe&quot;, email: Optional(&quot;john_doe@invalid.com&quot;))</code></pre></div>\n<p>Finally, if you have set the default credentials but then wish to make a request from that client without supplying credentials, you can specify the  NilCredentials  type:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Make a request without providing credentials</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/multiAuthProfile\"</span><span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">:</span> <span class=\"token function\">NilCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token punctuation\">(</span>returnedItem<span class=\"token punctuation\">:</span> <span class=\"token builtin\">AuthedUser</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Error</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token keyword\">in</span>\n \n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected success without credentials: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>returnedItem<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response without credentials: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which results in:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Response without credentials: 401 : Unauthorized</code></pre></div>","frontmatter":{"title":"Type-Safe Authentication using OAuth tokens","blurb":"In the 2.4 release of Kitura, we introduced a facility called Type-Safe Middleware, and with it two conforming implementations: Sessions and Credentials","date":"2018-06-29","path":"/blogs/type-safe-authentication-using-oauth-tokens","author":"David Jones"}},{"html":"<h2 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>In Kitura 2.4 we have made enhancements to Codable Query Parameters to support extra filtering. This includes the ability to filter using operators such as greater than, inclusive ranges and pagination through Codable Routing. We then took a further step and incorporated these capabilities into Swift-Kuery-ORM in order to filter results from database queries.</p>\n<hr>\n<h2 id=\"setting-up-swift-kuery-orm\"><a href=\"#setting-up-swift-kuery-orm\" aria-label=\"setting up swift kuery orm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting Up Swift-Kuery-ORM</h2>\n<p>In your Kitura application, follow the README to set up Swift-Kuery-ORM using PostgreSQL, MySQL or SQLite.</p>\n<ol>\n<li>\n<p>Create a Student type that implements Model:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token keyword\">let</span> grade<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Create the table in the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">try</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTableSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">let</span> error <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Save a list of students:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">78.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">65.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">82.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">94.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n             </code></pre></div>\n</li>\n</ol>\n<p>for student in students {\nstudent.save { student, error in\nif let error = error {\nprint(\"Error:\", error)\n}\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">4. Find a list of students and print them:\n\n```swift\nStudent.findAll { students, error in\n  if let error = error {\n    print(&quot;Error:&quot;, error)    \n  }\n   \n  if let students = students {\n    students.forEach { print($0) }</code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">65</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">82</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">94</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This would translate in Raw SQL to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT * FROM Students;</code></pre></div>\n<hr>\n<h2 id=\"using-query-parameters-with-swift-kuery-orm\"><a href=\"#using-query-parameters-with-swift-kuery-orm\" aria-label=\"using query parameters with swift kuery orm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Query Parameters with Swift-Kuery-ORM</h2>\n<p>The following types have been added to Kitura 2.4 to enhance filtering:</p>\n<ul>\n<li>GreaterThan &#x26; LowerThan</li>\n<li>GreaterThanOrEqual &#x26; LowerThanOrEqual</li>\n<li>InclusiveRange &#x26; ExclusiveRange</li>\n<li>Pagination</li>\n<li>Ordering</li>\n</ul>\n<p>Let’s suppose we want to filter over the name of the Student, the age being greater than a value and the grade being inside a range.</p>\n<ol>\n<li>\n<p>Let’s define our Query type that implements QueryParams:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Query</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">QueryParams</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">GreaterThan</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> grade<span class=\"token punctuation\">:</span> <span class=\"token builtin\">InclusiveRange</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Double</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n<li>\n<p>Create an instance of Query:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token function\">GreaterThan</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token function\">InclusiveRange</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">:</span> <span class=\"token number\">76</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">:</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>Find the students matching the query and print them:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>matching<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> students<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span>\n   \n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> students <span class=\"token operator\">=</span> students <span class=\"token punctuation\">{</span>\n    students<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This would translate in Raw SQL to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT * FROM Students WHERE ((Students.name = &quot;Mark&quot;) AND (Students.age &gt; 23)) AND ((Students.grade &gt;= 76) AND (Students.grade &lt;= 88));</code></pre></div>\n<p>The URL would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?name=Mark&amp;age=23&amp;grade=76,88</code></pre></div>\n<p>Now, we want only the first 3 values and they have to be ordered descending by grade:</p>\n<ol>\n<li>\n<p>Let’s define our MyQuery type that implements QueryParams:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyQuery</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">QueryParams</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> pagination<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Pagination</span>\n<span class=\"token keyword\">let</span> order<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Ordering</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Create an instance of MyQuery:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> myQuery <span class=\"token operator\">=</span> <span class=\"token function\">MyQuery</span><span class=\"token punctuation\">(</span>pagination<span class=\"token punctuation\">:</span> <span class=\"token function\">Pagination</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">:</span> <span class=\"token function\">Ordering</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grade\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>Find the students matching the query and print them:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>matching<span class=\"token punctuation\">:</span> myQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> students<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>  if let students = students {\nstudents.forEach { print($0) }\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Output:\n\n```swift\nStudent(name: &quot;Mark&quot;, age: 24, grade: 94)\nStudent(name: &quot;Alex&quot;, age: 23, grade: 82)\nStudent(name: &quot;Mark&quot;, age: 26, grade: 78)</code></pre></div>\n<p>This would translate in Raw SQL to :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT * FROM Students ORDER BY Students.grade DESC LIMIT 3 OFFSET 0;</code></pre></div>\n<p>The URL would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?pagination=0,3&amp;order=desc(grade)</code></pre></div>\n<hr>\n<h2 id=\"working-with-codable-routing-in-kitura\"><a href=\"#working-with-codable-routing-in-kitura\" aria-label=\"working with codable routing in kitura permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Codable Routing in Kitura</h2>\n<p>Swift-Kuery-ORM really shines when used with Kitura, in particular because the ORM API has been aligned with Kitura’s Codable Routing APIs, allowing the completion handlers from the Codable Routes to be passed directly into the ORM calls. This means that no additional code needs to be written.</p>\n<ol>\n<li>Create a handler that retrieves the students and register it with the Router for GET requests on /students:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @<span class=\"token function\">escaping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Student</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n \nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> getStudents<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This has implemented the following URI: GET: /students.</p>\n<ol start=\"2\">\n<li>Create a handler that saves the students, and register it with the Router for POST requests on /students:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">saveStudents</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Student</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n  \nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> saveStudents<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This has implemented the following URI: POST: /students.</p>\n<ol start=\"3\">\n<li>Now let’s add filtering to the GET route by updating the getStudents handler to also accept your type that implements QueryParams as an additional parameter:\nNote: This is using the Query struct from earlier:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Query</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @<span class=\"token function\">escaping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Student</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>matching<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This now implements a completely type-safe implementation of both the data handling, and the URL encoded query parameters for the following URI:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET:  /users?name=&lt;String&gt;&amp;age=&lt;Int&gt;&amp;grade=&lt;Int&gt;,&lt;Int&gt;</code></pre></div>\n<p>Note: that the type Query is set to optional. This means that the following URI is also supported:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET:  /users</code></pre></div>\n<p>If you want to include support for optional (non-required) query parameters, you just need to mark them as optional in your declared Swift type, eg: InclusiveRange?</p>\n<p>We have increased the capabilities of Swift-Kuery-ORM and carefully aligned it with Kitura to make persistence as easy as possible whilst maintaining type safety.</p>\n<hr>\n<h2 id=\"future\"><a href=\"#future\" aria-label=\"future permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future</h2>\n<p>The next features we are looking to integrate in Swift-Kuery-ORM, we believe will truly enhance its usage and provide essential functionalities. The following are just some of them:</p>\n<ul>\n<li>Migrations – the ability to apply incremental and reversible schema changes to the database.</li>\n<li>Relations between models – such as nested Models:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">School</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token keyword\">let</span> grade<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span>\n  <span class=\"token keyword\">let</span> school<span class=\"token punctuation\">:</span> <span class=\"token builtin\">School</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Support for NoSQL Databases such as Redis, MongoDB and CouchDB.</li>\n<li>Control over data types and sizes</li>\n</ul>","frontmatter":{"title":"Filtering in Swift-Kuery-ORM","blurb":"In Kitura 2.4 we have made enhancements to Codable Query Parameters to support extra filtering","date":"2018-06-08","path":"/blogs/filtering-swift-kuery-orm","author":"Enrique Lacal"}},{"html":"<p>OpenAPI is the most popular way to document RESTful APIs. It allows developers to define interface specifications in a structured machine readable format. These specifications can be both generated and consumed by tools that help in the building of verifiable interfaces. It can make development faster too!</p>\n<p>Kitura 2.4 now includes a feature that allows you to view the OpenAPI specification of your Kitura application. Kitura can expose an OpenAPI document that describes the application interfaces that are defined in your application as Codable routes. Change your application, recompile, and the OpenAPI document will reflect those changes!</p>\n<p>At first this might not seem that exciting, however, integrate it with some extra tooling and this can turn into a powerful development tool.</p>\n<p>So how do you see this OpenAPI document? First, there are a few steps needed to integrate OpenAPI tooling into your application…</p>\n<ul>\n<li>import KituraOpenAPI into your application:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraOpenAPI</span></code></pre></div>\n<ul>\n<li>Add a call to add API endpoints from the router into KituraOpenAPI. The call should go in your application startup code – perhaps your init() method:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">KituraOpenAPI</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEndpoints</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">:</span> router<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Add Kitura-OpenAPI.git as a dependency in your Package.swift:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/IBM-Swift/Kitura-OpenAPI.git\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre></div>\n<ul>\n<li>Then update your dependencies by running swift package update.</li>\n</ul>\n<p>Now go ahead, recompile and restart the application and you should be able to view the OpenAPI document by visiting the openapi page: <a href=\"http://localhost:8080/openapi\">http://localhost:8080/openapi</a></p>\n<p>That is good, however it gets much better if you visit the SwaggerUI page: <a href=\"http://localhost:8080/openapi/ui\">http://localhost:8080/openapi/ui</a> as this will present an API Explorer that is populated from the OpenAPI document, so it shows the routes you have configured in the currently running application.</p>\n<p>One click on a route will expand it so you can see what arguments it takes, what results it can return and a status code, but better still, you can click the “Try it out!” button to exercise that API immediately.</p>","frontmatter":{"title":"End-to-end Kitura testing with OpenAPI","blurb":"Kitura 2.4 now includes a feature that allows you to view the OpenAPI specification of your Kitura application","date":"2018-06-05","path":"/blogs/kitura-openapi","author":"Neil Hardman"}},{"html":"<p>Kitura 2.0 introduced Codable routing, a powerful way to quickly build REST APIs from Swift datatypes. Kitura 2.4 enhances Codable routing by introducing “Type-Safe Middlewares”. This is a facility that centralizes your middleware logic in one place, guarantees that routes are invoked only after any required middlewares have successfully executed, and provides compile-time type safety to your Kitura app. This blog introduces the TypeSafeMiddleware protocol and demonstrates it being used with sessions and HTTP Basic authentication.</p>\n<h2 id=\"type-safe-middleware\"><a href=\"#type-safe-middleware\" aria-label=\"type safe middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-Safe Middleware</h2>\n<p>Traditional Kitura middlewares are functions that you can register against routes. They run code and change the request and response before the execution of the route handlers. This is implemented by the handle() function in the following protocol:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">RouterMiddleware</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterRequest</span><span class=\"token punctuation\">,</span>\n                response<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterResponse</span><span class=\"token punctuation\">,</span>\n                next<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, Codable routes abstract away the request and response, so the results of standard middlewares are not available within the route handler.</p>\n<p>Type-safe middlewares, rather than augmenting the request/response objects, are responsible for returning an instance of a concrete Swift type:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">TypeSafeMiddleware</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterRequest</span><span class=\"token punctuation\">,</span>\n                       response<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterResponse</span><span class=\"token punctuation\">,</span>\n                       completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token keyword\">Self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The concrete type is Self, because this centralizes the middleware’s structure and behavior into a single place. The Codable route handler is passed a successfully executed middleware instance. This provides the user access to the middleware and the instance properties they specified when defining the type.</p>\n<p>To add a type-safe middleware to your Codable route, specify the middleware in the application route handler. For example, a handler for GET requests that requires an instance of MyMiddleware becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/example\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> getHandler<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MyMiddleware</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span> <span class=\"token operator\">=</span> middleware<span class=\"token punctuation\">.</span>user\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kitura will invoke your static MyMiddleware.handle() function, and if an instance of MyMiddleware is successfully created, it is passed to the route handler. If no instance is created, the route handler is not called. This removes the requirement for type checking or dealing with middleware failure within the handler itself. As a result, you have all the data you expect and type mismatches are checked at compile time (hence “type-safe”).</p>\n<hr>\n<h2 id=\"type-safe-sessions\"><a href=\"#type-safe-sessions\" aria-label=\"type safe sessions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe Sessions</h2>\n<p>We have added an implementation of type-safe sessions in Kitura-Session. This defines a TypeSafeSession protocol, which is also Codable. You can create a type that conforms to TypeSafeSession and contains exactly the data needed by your application. This type is then used as a type-safe middleware in your Codable routes. To demonstrate the benefits, let’s compare traditional and type-safe sessions for retrieving some books from a shopping cart:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> author<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"raw-sessions\"><a href=\"#raw-sessions\" aria-label=\"raw sessions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Raw sessions:</h3>\n<p>Initialize the session:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> <span class=\"token function\">Session</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">CookieParameter</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie-name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Register the session on the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> session<span class=\"token punctuation\">)</span> </code></pre></div>\n<p>Interact with the session within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> bookData <span class=\"token operator\">=</span> session<span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> book <span class=\"token keyword\">in</span> bookData <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> bookTitle <span class=\"token operator\">=</span> book<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">let</span> bookAuthor <span class=\"token operator\">=</span> book<span class=\"token punctuation\">[</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">}</span>\n        books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> bookTitle<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">:</span> bookAuthor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Work with your books from the session</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">:</span> books<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"type-safe-sessions-1\"><a href=\"#type-safe-sessions-1\" aria-label=\"type safe sessions 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe sessions:</h3>\n<p>Define and set up your session class with expected fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySession</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeSession</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sessionId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>             <span class=\"token comment\">// Requirement: every session must have an ID          </span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span>                 <span class=\"token comment\">// User-defined type         </span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>sessionId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>         <span class=\"token comment\">// Requirement: must be able to create a new (empty)          </span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sessionId <span class=\"token operator\">=</span> sessionId    <span class=\"token comment\">// Initialise the sessionId         </span>\n        books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                    <span class=\"token comment\">// empty value for any non-optional properties.          </span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">MySession</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> cookie <span class=\"token operator\">=</span> <span class=\"token function\">SessionCookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cookie-name\"</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> store<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Store</span><span class=\"token operator\">?</span>           <span class=\"token comment\">// Store for the sessions (nil defaults to in memory store)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By convention, we have defined the instance properties separate from the static properties, which are in an extension. This is to distinguish between data provided by an instance, and static configuration properties on the type.</p>\n<p>Interact with the session within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MySession</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>books\n    <span class=\"token comment\">// Work with your books from the session</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By using type-safe sessions, we have ensured that:</p>\n<ul>\n<li>When the route handler is invoked, a session has already been successfully created (or retrieved from a store), and passed to the handler. There is no need to check whether a session exists.</li>\n<li>All data in the session can be accessed directly from your class, with strongly typed properties. There is no need to downcast.</li>\n<li>All data stored on a session can be persisted. A TypeSafeSession is Codable, so all types that are stored in the session must also be Codable.</li>\n</ul>\n<hr>\n<h2 id=\"http-basic-authentication\"><a href=\"#http-basic-authentication\" aria-label=\"http basic authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Basic Authentication</h2>\n<p>We have also added an implemention of type-safe HTTP Basic authentication in Kitura-CredentialsHTTP. HTTP Basic authentication transmits credentials in an “Authorization” header as base64 encoded user ID/password pairs. Kitura also allows you to send the username and password in the URL as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://username:password@www.example.com/</code></pre></div>\n<p>Note: some web browsers disable this for security reasons.</p>\n<h3 id=\"raw-http-basic-authentication\"><a href=\"#raw-http-basic-authentication\" aria-label=\"raw http basic authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Raw HTTP Basic authentication:</h3>\n<p>In raw routing, you could implement HTTP basic code as follows:</p>\n<p>Initialize the basicCredentials:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"qwerasdf\"</span><span class=\"token punctuation\">]</span>\n \n<span class=\"token keyword\">let</span> basicCredentials <span class=\"token operator\">=</span> <span class=\"token function\">CredentialsHTTPBasic</span><span class=\"token punctuation\">(</span>verifyPassword<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> storedPassword <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> storedPassword <span class=\"token operator\">==</span> password <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">UserProfile</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> userId<span class=\"token punctuation\">,</span> displayName<span class=\"token punctuation\">:</span> userId<span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">:</span> <span class=\"token string\">\"HTTPBasic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note: This is a simplified example. In practice, passwords would not be stored in plain text.</p>\n<p>Register the middleware on the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">credentials<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">:</span> basicCredentials<span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Interact with the credentials within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> profile <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>userProfile <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> \n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"type-safe-http-basic-authentication\"><a href=\"#type-safe-http-basic-authentication\" aria-label=\"type safe http basic authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe HTTP Basic authentication:</h3>\n<p>Type-safe middleware makes this simpler and safer. We create a new type conforming to TypeSafeHTTPBasic:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeHTTPBasic</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">MyBasicAuth</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"qwerasdf\"</span><span class=\"token punctuation\">]</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">verifyPassword</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">MyBasicAuth</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> storedPassword <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> storedPassword <span class=\"token operator\">==</span> password <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyBasicAuth</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We interact with the credentials within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">MyBasicAuth</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n   <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The route will now only be invoked if authentication has been successful. The handler is passed a MyBasicAuth instance with the id field initialized appropriately, as well as any additional user-defined fields, instead of a generic [String: Any] dictionary.</p>\n<p>A further benefit of this approach can be seen when combining HTTP basic authentication with Swift-Kuery-ORM for user persistence. Because MyBasicAuth is Codable, we can also make it conform to Model. Then you can initialize your user type by using id as a primary key to retrieve the instance from the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeHTTPBasic</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">MyBasicAuth</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> idColumnName <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">verifyPassword</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">MyBasicAuth</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> userProfile<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> userProfile <span class=\"token operator\">=</span> userProfile <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> password <span class=\"token operator\">==</span> userProfile<span class=\"token punctuation\">.</span>password <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span>\n                <span class=\"token punctuation\">}</span>   \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, we have implemented the verifyPassword function by retrieving a user’s profile from a database. A profile with an id matching the supplied username is retrieved. If no matching id is found, or if the supplied password does not match, the middleware fails. If a match is found, the ORM returns an instance of MyBasicAuth, which is then provided to the route handler.</p>","frontmatter":{"title":"A new kind of Kitura middleware: type-safe and easy to use","blurb":"Kitura 2.4 enhances Codable routing by introducing “Type-Safe Middlewares”","date":"2018-06-05","path":"/blogs/type-safe-middleware","author":"Andrew Lees"}},{"html":"<p>In February 2018, at the try! Swift Tokyo conference, Apple announced SwiftNIO — a new cross-platform, asynchronous, event-driven networking framework for building servers and clients in Swift. SwiftNIO has the potential to provide all the low-level socket-handling and HTTP protocol support in Kitura, and hence could be a replacement for the current Kitura-net and BlueSocket libraries which underpin Kitura today. The Kitura team have been working on Kitura-NIO, a Kitura interface to SwiftNIO and we think now is a good time to release it for wider experimentation, testing and feedback.</p>\n<p>Kitura-NIO has been designed to be API-compatible with current Kitura-net API, though the underlying implementation uses SwiftNIO. As a consequence, Kitura itself needs very few changes to run on top of Kitura-NIO. These changes are available in the new kitura-nio and kitura-2.4-nio branches. To use Kitura with Kitura-NIO, users just need to point to one of these branches from their application’s Package.swift and rebuild their Kitura application:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">dependencies<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n   <span class=\"token comment\">//other dependencies</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/IBM-Swift/Kitura\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token function\">branch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kitura-nio\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>These new branches will be updated and rebased regularly. If you have existing Kitura applications, Kitura-NIO is likely to provide all that your application needs, barring the FastCGI protocol implementation which we believe is not widely used. We urge you to test your applications’ functionality and performance and we will be happy to receive feedback — pull requests, bug reports, performance comparison reports, enhancement requests or anything else. We’re available on Slack or you can open an issue at the Kitura-NIO GitHub repository.</p>\n<p>Kitura-NIO fully supports HTTP and HTTPS, both servers and clients. It also has IPv6 support. A NIO based implementation of Kitura-WebSocket is also on its way. Kitura-NIO is currently supported with Swift 4.1 and 4.2 on Ubuntu 14.04, Ubuntu 16.04 and macOS.</p>\n<p>The major reason behind the decision to keep the API compatible with Kitura-net was API stability. We wanted Kitura users to experiment with Kitura-NIO, with zero code changes to their Kitura applications.</p>\n<p>Performance analysis of Kitura-NIO is work-in-progress. We’ve identified a few bottlenecks and implemented some performance improvements already. Translating between the Kitura-net types and the SwiftNIO types does incur a cost. In future, we may want to eliminate this cost by exposing NIO types (or opaque wrappers of them) directly to Kitura users. This may require API changes, but it could be the path to better performance. However, we also know that Kitura users strongly value API stability, backward compatibility and ease of migration. So, we have an interesting trade-off problem at hand and we’d like to solve it in a way that best suits Kitura’s users. We would love to hear your opinion on this.</p>\n<p>This blog post would be incomplete without thanking the SwiftNIO team — especially @johannesweiss and @Lukasaoz. The team has been approachable, extremely helpful and amazingly quick with our questions and bug reports!</p>","frontmatter":{"title":"Introducing Kitura-NIO","blurb":"Kitura-NIO has been designed to be API-compatible with current Kitura-net API, though the underlying implementation uses SwiftNIO","date":"2018-05-31","path":"/blogs/filtering-swift-kuery-orm","author":"Pushkar Kulkarni"}},{"html":"<p>Kitura has provided support for rendering templated content ever since version 1.0 but now Kitura 2.4 introduces a new type-safe API for rendering Codable structures.</p>\n<h2 id=\"what-is-it\"><a href=\"#what-is-it\" aria-label=\"what is it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is it?</h2>\n<p>With the release of Kitura 2.4 you can now use Codable structs to render content using templating.</p>\n<h2 id=\"how-do-i-get-started\"><a href=\"#how-do-i-get-started\" aria-label=\"how do i get started permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do I get started?</h2>\n<p>Kitura supports multiple template engines:</p>\n<ul>\n<li>Kitura-Stencil</li>\n<li>Kitura-Mustache</li>\n<li>Kitura-Markdown</li>\n</ul>\n<p>To use type-safe templating all you need to do is add Kitura (at 2.4 or later) and one of the above template engines to your Package.swift, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.package(url: &quot;http://github.com/IBM-Swift/Kitura&quot;, from: &quot;2.4.0&quot;),\n.package(url: &quot;http://github.com/IBM-Swift/Kitura-StencilTemplateEngine&quot;, from: &quot;1.0.0&quot;)</code></pre></div>\n<h2 id=\"how-do-i-use-it\"><a href=\"#how-do-i-use-it\" aria-label=\"how do i use it permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How do I use it?</h2>\n<p>When you've added Kitura and a template engine to your project you can start rendering your template files with Codable structs. Here is a quick example of that using the popular Stencil templating engine.</p>\n<p>All we need to do is create a stencil template file, I called mine <code class=\"language-text\">MyStencil.stencil</code>, and then populate that file with the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{% if friends %}\n    {% for friend in friends %}\n        {{friend.firstName}} {{friend.lastName}}\n    {% endfor %}\n{% else %}\n    You have no friends! :(\n{% endif %}</code></pre></div>\n<p>Next we need to create our Codable struct:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Friend</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then create an instance of this struct:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> friends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Friend</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Jack\"</span><span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Sparrow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Friend</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Captain\"</span><span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"America\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>And now we can render the Stencil template file using the friends value:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/friends\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyStencil.stencil\"</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> friends<span class=\"token punctuation\">,</span> forKey<span class=\"token punctuation\">:</span> <span class=\"token string\">\"friends\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The 'forKey' parameter is a new addition to the rendering methods, this allows you to provide the variable name from your template file that this particular struct will populate.</p>\n<hr>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next Steps</h2>\n<p>Because the only requirement is that the struct you want to render is Codable, type-safe templating integrates easily with our Swift-Kuery-ORM. When you call Model.findAll() to retrieve data from your database you can pass the results straight through to your rendering code with type-safety from end to end.</p>\n<hr>\n<h2 id=\"credits\"><a href=\"#credits\" aria-label=\"credits permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Credits</h2>\n<p>I'd like to thank Steven Van Impe from the Kitura community for his assistance with the development of this new API. Steven provided valuable help with the design and testing of the feature and I'm very grateful for his support.</p>","frontmatter":{"title":"Write powerful web apps with Kitura templating","blurb":"Kitura 2.4 introduces a new type-safe API for rendering Codable structures","date":"2018-05-31","path":"/blogs/type-safe-templating","author":"David Dunn"}},{"html":"<p>In enterprise businesses, microservices are designed according to best architectural practice and implemented to deliver the business solution in the form of services. These services are often consumed by HTTP REST API calls. In this blog, I will explain how to approach asynchronous programming on server-side Swift using Grand Central Dispatch (GCD) and OperationQueue.</p>\n<p>In general, the backend microservices execute heavy CPU intensive or I/O processes such as DB CRUD operations, component level communication, processing of media files etc. In iOS side Swift programming, it’s general practice to make use of closures and call back methods to make asynchronous calls. Server-side Swift programming allows developers to use the same closure and call back methods without any limitations for asynchronous tasks. However, when compared to iOS programming, the server-side API code can require significantly more asynchronous calls in a single module block. This leads to multiple call back closures and nested async code. An alternate native solution is to make use of GCD and OperationQueue methods. There are some open source Swift libraries, such as PromiseKit to handle complex functions, which use GCD and OperationQueue concepts under the hood, but this article is going to show you a native way of coding this yourself.</p>\n<p>I explain the solution and its benefits with a simple example below using Kitura.</p>\n<hr>\n<h2 id=\"cpu-intensive-processes\"><a href=\"#cpu-intensive-processes\" aria-label=\"cpu intensive processes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU Intensive Processes</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Let&#39;s name these processes to refer in our example codes and add a &#39;time to execute&#39; weight in terms of seconds. P1 = 3 sec, P2 = 4 sec, P3 = 2 sec, P4 = 6 sec, P5 = 1 sec</code></pre></div>\n<p>These functions are simulated using the sleep method to consume a few seconds of execution time and are defined as:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> onCompletion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> output<span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n   \n<span class=\"token keyword\">func</span> <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> onCompletion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> output<span class=\"token punctuation\">:</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<hr>\n<h2 id=\"implementation-scenario\"><a href=\"#implementation-scenario\" aria-label=\"implementation scenario permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementation Scenario</h2>\n<p>In our example, we construct a HTTP GET API, say /dataIntensiveJob, that requires all of the above processes from P1 – P5. These processes can be dependent or independent and the module can be programmed with nested asynchronous closures or using GCD. This means we have four types of implementation:</p>\n<ol>\n<li>“/dataIntensiveJobAsync/independent”</li>\n<li>“/dataIntensiveJobGCD/independent”</li>\n<li>“/dataIntensiveJobAsync/dependent”</li>\n<li>“/dataIntensiveJobGCD/dependent”</li>\n</ol>\n<h2 id=\"1-independent-task-with-traditional-nested-async-closure-blocks\"><a href=\"#1-independent-task-with-traditional-nested-async-closure-blocks\" aria-label=\"1 independent task with traditional nested async closure blocks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Independent Task with Traditional Nested Async Closure Blocks</h2>\n<p>Typically, the module here requires a set of independent tasks to be completed. To avoid blocking the main thread, they can be programmed to run in multiple async blocks irrespective of order. Also, since there is no mechanism in place to notify about completion of all the tasks, operations could be sequenced in a nested async block. Hence, the completion of all the tasks is identified by completion of the innermost block.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">executeIndependentHeavyProcesses</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> onCompletion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> outputMessage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>p1 <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n              <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n              <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The only advantage of programming this way is that we could write the code quickly. However, this forms a pyramid structure when nested further and becomes complex as the number of lines of code increases. It also ends up having many open and close brackets which makes the code extremely difficult to read. Here, the processes are executed in a defined sequence. The total response time is the sum of the execution time of the individual processes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Execution Order:  P1 -&gt; P2 -&gt; P3 -&gt; P4 -&gt; P5\nAPI Execution Total Response Time: 16025 ms</code></pre></div>\n<h2 id=\"2-independent-task-with-operation-queue\"><a href=\"#2-independent-task-with-operation-queue\" aria-label=\"2 independent task with operation queue permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Independent Task with Operation Queue</h2>\n<p>The alternative approach for executing the independent tasks is to use OperationQueue. Here an instance of OperationQueue is created. Operation queues are concurrent by default. We can also sequence and serialize the queue with optional attributes. Independent tasks are added as operations to the queue in a block of code.</p>\n<p>At the end of the module self.operationQueue.waitUntilAllOperationsAreFinished() is called – to ensure that the next line of the completion callback method is invoked only when all the submitted operations have been executed. We can create multiple operation queues if required. Below is the equivalent code using OperationQueue methods:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> operationQueue <span class=\"token operator\">=</span> <span class=\"token function\">OperationQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   \n  <span class=\"token keyword\">func</span> <span class=\"token function\">executeIndependentHeavyProcesses</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> onCompletion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> outputMessage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operationQueue<span class=\"token punctuation\">.</span>addOperation<span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operationQueue<span class=\"token punctuation\">.</span>addOperation<span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Other processes</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n         \n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operationQueue<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntilAllOperationsAreFinished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although the number of lines of code is slightly more than in the nested async approach, this is much better than the first approach for the following reasons:</p>\n<ul>\n<li>Independent tasks are executed concurrently in the multiple sub-threads which gives a faster response time.</li>\n<li>This code has better readability and control. Each block is divided into sub-blocks and hence, it is easy to follow up with brackets. In fact, the above defined task can be assigned to an operation variable and added to the same or different queues for reusability.</li>\n<li>QoS factors and thread priority can be set as attributes on these queues, unlike the async closure block which uses the system default background thread.</li>\n</ul>\n<p>Here the execution order depends on the submission time of each task to the queue as the tasks are executed in parallel. Hence the total response time is the maximum possible parallel execution time.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Execution Order:  P5 -&gt; P3 -&gt; P1 -&gt; P2 -&gt; P4\nAPI Execution Total Response Time:  6025 ms </code></pre></div>\n<h2 id=\"3-dependent-task-with-nested-async-closure-blocks\"><a href=\"#3-dependent-task-with-nested-async-closure-blocks\" aria-label=\"3 dependent task with nested async closure blocks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Dependent Task with Nested Async Closure Blocks</h2>\n<p>Here, the module requires a defined set of subtasks to be completed. A few or all the subtasks are dependent on other subtask(s) within the same module. Hence the module expects all the subtasks to be completed in a defined execution order. The nesting should be done carefully to preserve the execution order. Even here, to get notified on the last completed task, it is required to chain both dependent and the independent tasks together. Let’s say that the module requires four tasks – P1, P2, P3 &#x26; P4 to be completed. P1 and P2 are mutually dependent and P3 and P4 are mutually dependent. Then the code looks similar to the first use case.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">executeDependentHeavyProcesses</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> onCompletion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> outputMessage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>p1 <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">}</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This approach is identical to the first (Independent task with nested Async Closure), except for the fact that the execution order within dependent subtasks should be preserved. It could be P1->P2->P3->P4 or P3->P4->P1->P2. It has all the disadvantages of the first use case and the total response time is the sum of the execution of the individual processes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Execution Order:  P1 -&gt; P2 -&gt; P3 -&gt; P4\nAPI Execution Total Response Time: 15029 ms </code></pre></div>\n<h2 id=\"4-dependent-task-with-gcd-and-operationqueue\"><a href=\"#4-dependent-task-with-gcd-and-operationqueue\" aria-label=\"4 dependent task with gcd and operationqueue permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Dependent Task with GCD and OperationQueue</h2>\n<p>The alternate solution is to use GCD for complex use cases, in addition to the OperationQueue explained in scenario 2. When the subtasks are dependent, maintaining the order of execution becomes critical and OperationQueue’s concurrent execution might not work well. To address this, the implementation could be extended with GCD, Serialized OperationQueue, simple Async blocks etc. The variations are listed below:</p>\n<h3 id=\"a-when-the-module-contains-few-dependent-tasks-that-can-be-grouped\"><a href=\"#a-when-the-module-contains-few-dependent-tasks-that-can-be-grouped\" aria-label=\"a when the module contains few dependent tasks that can be grouped permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>a. When the module contains few dependent tasks that can be grouped</h3>\n<p>Here, we can group all the dependent tasks and run them in nested blocks. In our example, P1 and P2 make one group and P3 and P4 make another group. Since the dependency is between subtasks within a group and the groups are independent of each other, we submit the group block to the Operation Queue. Now, to obtain the completion status of each block, we create a GCD DispatchGroup object called ‘dispatchGroup’. Every subtask will have a group entry and exit code. The dispatchGroup.wait() method is called at the end of the module which blocks further execution, but not on the main queue.</p>\n<p>Here, OperationQueue acts more like a simple background GCD Queue. So, as an alternative, we can also use a simple GCD concurrent Queue and submit the group.</p>\n<h3 id=\"b-when-the-module-contains-dependent-subtasks-that-cannot-be-grouped\"><a href=\"#b-when-the-module-contains-dependent-subtasks-that-cannot-be-grouped\" aria-label=\"b when the module contains dependent subtasks that cannot be grouped permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>b. When the module contains dependent subtasks that cannot be grouped</h3>\n<p>In this case, we can still use the OperationQueue execution sequence but with the ‘notification API’ to control the sequence of execution. When the number of subtasks is small, it is better to go with nested completion blocks to keep the code simple, when the subtask is complex consider sequencing the Operations.</p>\n<p>Below is the code snippet that uses the grouping of subtask and GCD Dispatch Group.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> dispatchGroup <span class=\"token operator\">=</span> <span class=\"token function\">DispatchGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">executeDependentHeavyProcesses</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> onCompletion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token number\">_</span> outputMessage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n \n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operationQueue<span class=\"token punctuation\">.</span>addOperation <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>dispatchGroup<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>dispatchGroup<span class=\"token punctuation\">.</span><span class=\"token function\">leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n     \n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>operationQueue<span class=\"token punctuation\">.</span>addOperation <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>dispatchGroup<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span><span class=\"token function\">p4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>dispatchGroup<span class=\"token punctuation\">.</span><span class=\"token function\">leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n     \n    <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>dispatchGroup<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The major advantage of using this GCD Dispatch Group is that we get a simple, scalable, easy to read implementation. We also get better performance as the concurrency is achieved at the group level.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Execution Order:  P3 -&gt; P1 -&gt; P2 -&gt; P4\nAPI Execution Total Response Time: 8330 ms</code></pre></div>\n<hr>\n<h2 id=\"edge-case-iteration-on-dependent-or-independent-module\"><a href=\"#edge-case-iteration-on-dependent-or-independent-module\" aria-label=\"edge case iteration on dependent or independent module permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Edge Case: Iteration on Dependent (or) Independent Module</h2>\n<p>Let’s consider an edge case scenario, where we need to iterate and execute the entire dependent and independent modules several times. A good example is – ‘Deletion/Additions of bulk users’. We could achieve it using a ‘for loop’ and a counter variable to execute the modules several times. This is a really bad idea!!! A better approach would be to use a recursive callback closure. That means, on completion, call the same block repeatedly, until the count condition is satisfied. Even then, it works sequentially and becomes hard to debug when a bug arises.</p>\n<p>OperationQueue and GCD really does the magic here by providing a clean and scalable implementation. We also get the advantage of achieving maximum concurrency. So, if five of the user records should be added, then all five ‘add user’ modules and their subtasks get executed in the best possible number of parallel threads. I am skipping the details of the example code as its pretty straightforward, but it is included in my source code (GIT) for reference.</p>\n<hr>\n<h2 id=\"performance-comparison\"><a href=\"#performance-comparison\" aria-label=\"performance comparison permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance Comparison</h2>\n<p>We can categorize the advantages that have been discussed so far into:</p>\n<ol>\n<li>Better performance</li>\n<li>Ease of coding and maintenance</li>\n</ol>\n<p>While ease of coding is a concern from the development and scalability perspective, performance is something which cannot be compromised in a lightweight microservice server architecture. We want the API request calls to respond as quickly as possible. With the scenarios explained thus far, I have run the example code and measured the response times using the POSTMAN REST client tool.</p>\n<p>It is a well-known fact that concurrency will give better turnaround times and performance, but it is interesting to see the results below as they show how drastically performance is affected when we fail to follow the right approach. This reiterates the importance of incorporating concurrent programming in a Swift based microservice API implementation.</p>\n<p>The result clearly shows the need to focus on the right implementation approach based on the use case. For instance, if we take the ‘iteration’ use case, we see a visible difference in the response time with just three loops. One may argue that we do not need to make the client wait until the operation is complete, as there are solutions like returning a 202 ‘Accepted’ HTTP status code. However, the processing and task turnaround time would still be badly impacted. When we talk about a real-time use case like user management in a production environment, we could experience a potential and significant difference in the processing time.</p>\n<hr>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>In a development environment, constraints such as time to deliver, can make developers use a simple approach like nested async with closures. I have personally experienced how, often proof of concept (PoC) code developed quickly, is refined and directly pushed into production due to time constraints. During the initial development stage, it is quite common to focus on the expected output and ignore performance. However, refactoring the code at a later stage to achieve performance is cumbersome. So, it is best practice to write code where performance could be improved and tuned with minimum effort. This blog is not intended to compare the performance of concurrent programming with nested async, but to highlight the significance and advantage of choosing the right approach for a given scenario.</p>\n<p>The need to use GCD and OperationQueue is highly dependent on the requirement use case. The same approach cannot be applied everywhere as it makes the code inconsistent and almost cumbersome. While designing the code structure, developers should give thought to factors like scalability, ability to modularize the code blocks, scope of requirement changes, number of lines of code etc.</p>\n<p>I have done the sample coding and the project source code is uploaded to my GIT repository for reference. Feel free to add comments or reach out to me for any discussions.</p>\n<p>Happy Coding!!!</p>","frontmatter":{"title":"Asynchronous Programming in Server-Side Swift using GCD and OperationQueue","blurb":"In this blog, I will explain how to approach asynchronous programming on server-side Swift using Grand Central Dispatch (GCD) and OperationQueue.","date":"2018-05-22","path":"/blogs/server-side-swift-using-gcd","author":"Sangeeth Sivakumar"}},{"html":"<p>In Kitura 2.3 , we added support for receiving POST requests, which use the application/x-www-form-urlencoded content type. This blog describes the new APIs to handle these URL encoded forms for both Raw and Codable routes. We then provide a step by step example of a Kitura server receiving an HTML form and mapping the request to a Codable Swift object.</p>\n<h2 id=\"url-encoded-post-forms\"><a href=\"#url-encoded-post-forms\" aria-label=\"url encoded post forms permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL Encoded POST Forms</h2>\n<p>Typically, webpages use HTML forms to send POST requests. The sender marks the request as URL encoded using the content-type header application/x-www-form-urlencoded. This indicates that the request body is a query string consisting of “key=value” pairs, separated by the “&#x26;” symbol. As a result, Kitura can use its query decoder to map the body of a URL encoded form to a Swift object. For our demonstrations, we will use the following HTML form POST request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">POST / HTTP/1.1\nHost: http://localhost:8080\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 17\n\nname=David&amp;age=42</code></pre></div>\n<hr>\n<h2 id=\"receiving-url-encoded-forms-in-kitura-routes\"><a href=\"#receiving-url-encoded-forms-in-kitura-routes\" aria-label=\"receiving url encoded forms in kitura routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Receiving URL Encoded Forms in Kitura Routes</h2>\n<p>With the release of Kitura 2.3, your Kitura application can now receive HTML form data in a convenient and type-safe way. As an example, we will map the POST request above to a Swift struct called User.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Previously, this would require the following boilerplate code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/form\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> <span class=\"token function\">BodyParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  \nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/form\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>asURLEncoded<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">let</span> ageString <span class=\"token operator\">=</span> body<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>ageString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> body<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unprocessableEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Application logic</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>created<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But in Kitura 2.3 you can use request.read(as: &#x3C;Codable.protocol>) to decode URL encoded forms into a Codable type. This means that, while using Raw routing, we can vastly simplify the code above to:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/form\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unprocessableEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Application logic</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>created<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Furthermore, you can use URL encoded forms within Codable routes. This means that, you can receive the form, parse it to a Swift object and use it within your route just by declaring the expected Swift object in the route handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/form\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> formHandler<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">formHandler</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Application logic</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"url-encoded-get-forms\"><a href=\"#url-encoded-get-forms\" aria-label=\"url encoded get forms permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>URL Encoded GET Forms</h2>\n<p>A webpage can also send an HTML form using a HTTP GET request. In this case, the form data is sent as query parameters on the end of the url. You can then map the received query parameters to a Swift object:</p>\n<p>For Raw routes you can use QueryDecoder to decode the query parameters into your Codable Swift object.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/form\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">QueryDecoder</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>queryParameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unprocessableEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Application logic</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>created<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For Codable routes, you just need to define your Swift object as conforming to QueryParams:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">QueryParams</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>You can then use the object within your route by declaring it in the route handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/form\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> getFormHandler<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getFormHandler</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Application logic</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Currently Codable routes with QueryParams cannot return a single codable object so we are returning an array. This feature has been added to the master branch and will be in the next Kitura release.</p>\n<hr>\n<h2 id=\"example-kitura-server-receiving-url-encoded-forms-in-routes\"><a href=\"#example-kitura-server-receiving-url-encoded-forms-in-routes\" aria-label=\"example kitura server receiving url encoded forms in routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Kitura Server receiving URL Encoded Forms in Routes</h2>\n<p>To demonstrate these new capabilities, we will create a simple Kitura web server. We will serve a static webpage, which will send GET and POST HTML forms. This server will then have Raw and Codable routes, which will receive these forms and return the corresponding Swift struct.</p>\n<ol>\n<li>In the terminal, using the Kitura command-line interface, generate a basic Kitura server:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir ~/URLEncodedForms\ncd ~/URLEncodedForms\nkitura init</code></pre></div>\n<ol start=\"2\">\n<li>Create your web page HTML file:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir ~/URLEncodedForms/public\ncd ~/URLEncodedForms/public\ntouch formwebpage.html\nopen -a Xcode.app formwebpage.html</code></pre></div>\n<ol start=\"3\">\n<li>Copy in the following HTML:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>URL Encoded Forms<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>Post to Raw route<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>raw<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>application/x-www-form-urlencoded<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>redirect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Name: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    Age: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>Post to Codable route<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>codable<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>application/x-www-form-urlencoded<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>redirect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Name: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    Age: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>Get to Raw route<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>raw<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>application/x-www-form-urlencoded<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>redirect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Name: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    Age: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>Get to Codable route<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>codable<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>application/x-www-form-urlencoded<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>redirect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    Name: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    Age: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>required<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>redirect<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ol start=\"4\">\n<li>Open your Kitura Xcode project:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ~/URLEncodedForms\nopen URLEncodedForms.xcodeproj/</code></pre></div>\n<ol start=\"5\">\n<li>Open Sources > Application > Application.swift</li>\n<li>Add your User struct after the App class:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">QueryParams</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"7\">\n<li>\n<p>Inside the postInit function, add the static file server middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> <span class=\"token function\">StaticFileServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>Below your static file server, add a Raw route to receive a POST form:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/raw\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unprocessableEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Raw POST route: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">)</span></span>, is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>age<span class=\"token delimiter variable\">)</span></span> years old\"</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>created<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"9\">\n<li>Below the previous route, add a Raw route to receive a GET form:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/raw\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">QueryDecoder</span><span class=\"token punctuation\">(</span>dictionary<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">.</span>queryParameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unprocessableEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Raw GET route: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">)</span></span>, is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>age<span class=\"token delimiter variable\">)</span></span> years old\"</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>created<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"10\">\n<li>Below your Raw routes, register the handlers for GET and POST requests on “codable”.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/codable\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> postFormHandler<span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/codable\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> getFormHandler<span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"11\">\n<li>After the postInit function, add your postFormHandler function:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">postFormHandler</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Codable POST route: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">)</span></span>, is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>age<span class=\"token delimiter variable\">)</span></span> years old\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"12\">\n<li>Below the previous handler, add your getFormHandler function:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">getFormHandler</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">User</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Codable GET route: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">)</span></span>, is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>age<span class=\"token delimiter variable\">)</span></span> years old\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"13\">\n<li>In the top left corner of Xcode you should see a small toolbox icon with the text “URLEncodedForms-Package” next to it. Click this icon and then click “URLEncodedForms” from the dropdown menu.</li>\n<li>Press the Run button or use the ⌘+R key shortcut to start your server.</li>\n</ol>\n<p>Go to <a href=\"http://localhost:8080/formwebpage.html\">http://localhost:8080/formwebpage.html</a>. You will see a very basic HTML page with four forms. When you submit the forms, they will send the data to the routes we just created. If you open your Xcode project, you should see the user’s name and age being printed to the console.</p>\n<p>Congratulations! You have just set up a simple website which submits URL encoded forms to a Kitura server. Within a real application you would probably use Swift-Kuery-ORM to save the users in a database and a template engine to produce a dynamic webpage based on the user.</p>","frontmatter":{"title":"Raw and Codable support for URL Encoded Forms in Kitura 2.3","blurb":"In Kitura 2.3 , we added support for receiving POST requests, which use the application/x-www-form-urlencoded content type","date":"2018-05-02","path":"/blogs/url-encoded-forms-kitura","author":"Andrew Lees"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}