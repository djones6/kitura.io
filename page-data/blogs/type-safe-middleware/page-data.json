{"componentChunkName":"component---src-templates-blogs-js","path":"/blogs/type-safe-middleware","webpackCompilationHash":"ce65eca4090760710b8f","result":{"data":{"blog":{"html":"<p>Kitura 2.0 introduced Codable routing, a powerful way to quickly build REST APIs from Swift datatypes. Kitura 2.4 enhances Codable routing by introducing “Type-Safe Middlewares”. This is a facility that centralizes your middleware logic in one place, guarantees that routes are invoked only after any required middlewares have successfully executed, and provides compile-time type safety to your Kitura app. This blog introduces the TypeSafeMiddleware protocol and demonstrates it being used with sessions and HTTP Basic authentication.</p>\n<h2 id=\"type-safe-middleware\"><a href=\"#type-safe-middleware\" aria-label=\"type safe middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-Safe Middleware</h2>\n<p>Traditional Kitura middlewares are functions that you can register against routes. They run code and change the request and response before the execution of the route handlers. This is implemented by the handle() function in the following protocol:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">RouterMiddleware</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterRequest</span><span class=\"token punctuation\">,</span>\n                response<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterResponse</span><span class=\"token punctuation\">,</span>\n                next<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, Codable routes abstract away the request and response, so the results of standard middlewares are not available within the route handler.</p>\n<p>Type-safe middlewares, rather than augmenting the request/response objects, are responsible for returning an instance of a concrete Swift type:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">TypeSafeMiddleware</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterRequest</span><span class=\"token punctuation\">,</span>\n                       response<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RouterResponse</span><span class=\"token punctuation\">,</span>\n                       completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token keyword\">Self</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The concrete type is Self, because this centralizes the middleware’s structure and behavior into a single place. The Codable route handler is passed a successfully executed middleware instance. This provides the user access to the middleware and the instance properties they specified when defining the type.</p>\n<p>To add a type-safe middleware to your Codable route, specify the middleware in the application route handler. For example, a handler for GET requests that requires an instance of MyMiddleware becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/example\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> getHandler<span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">func</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MyMiddleware</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span> <span class=\"token operator\">=</span> middleware<span class=\"token punctuation\">.</span>user\n    <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kitura will invoke your static MyMiddleware.handle() function, and if an instance of MyMiddleware is successfully created, it is passed to the route handler. If no instance is created, the route handler is not called. This removes the requirement for type checking or dealing with middleware failure within the handler itself. As a result, you have all the data you expect and type mismatches are checked at compile time (hence “type-safe”).</p>\n<hr>\n<h2 id=\"type-safe-sessions\"><a href=\"#type-safe-sessions\" aria-label=\"type safe sessions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe Sessions</h2>\n<p>We have added an implementation of type-safe sessions in Kitura-Session. This defines a TypeSafeSession protocol, which is also Codable. You can create a type that conforms to TypeSafeSession and contains exactly the data needed by your application. This type is then used as a type-safe middleware in your Codable routes. To demonstrate the benefits, let’s compare traditional and type-safe sessions for retrieving some books from a shopping cart:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> author<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"raw-sessions\"><a href=\"#raw-sessions\" aria-label=\"raw sessions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Raw sessions:</h3>\n<p>Initialize the session:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> <span class=\"token function\">Session</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">CookieParameter</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie-name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Register the session on the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> session<span class=\"token punctuation\">)</span> </code></pre></div>\n<p>Interact with the session within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">let</span> bookData <span class=\"token operator\">=</span> session<span class=\"token punctuation\">[</span><span class=\"token string\">\"books\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> book <span class=\"token keyword\">in</span> bookData <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> bookTitle <span class=\"token operator\">=</span> book<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">let</span> bookAuthor <span class=\"token operator\">=</span> book<span class=\"token punctuation\">[</span><span class=\"token string\">\"author\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">continue</span> <span class=\"token punctuation\">}</span>\n        books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> bookTitle<span class=\"token punctuation\">,</span> author<span class=\"token punctuation\">:</span> bookAuthor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Work with your books from the session</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">:</span> books<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"type-safe-sessions-1\"><a href=\"#type-safe-sessions-1\" aria-label=\"type safe sessions 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe sessions:</h3>\n<p>Define and set up your session class with expected fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySession</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeSession</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sessionId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>             <span class=\"token comment\">// Requirement: every session must have an ID          </span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span>                 <span class=\"token comment\">// User-defined type         </span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>sessionId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>         <span class=\"token comment\">// Requirement: must be able to create a new (empty)          </span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>sessionId <span class=\"token operator\">=</span> sessionId    <span class=\"token comment\">// Initialise the sessionId         </span>\n        books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>                    <span class=\"token comment\">// empty value for any non-optional properties.          </span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">MySession</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> cookie <span class=\"token operator\">=</span> <span class=\"token function\">SessionCookie</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"cookie-name\"</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"secret\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> store<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Store</span><span class=\"token operator\">?</span>           <span class=\"token comment\">// Store for the sessions (nil defaults to in memory store)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By convention, we have defined the instance properties separate from the static properties, which are in an extension. This is to distinguish between data provided by an instance, and static configuration properties on the type.</p>\n<p>Interact with the session within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MySession</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">var</span> books<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>books\n    <span class=\"token comment\">// Work with your books from the session</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By using type-safe sessions, we have ensured that:</p>\n<ul>\n<li>When the route handler is invoked, a session has already been successfully created (or retrieved from a store), and passed to the handler. There is no need to check whether a session exists.</li>\n<li>All data in the session can be accessed directly from your class, with strongly typed properties. There is no need to downcast.</li>\n<li>All data stored on a session can be persisted. A TypeSafeSession is Codable, so all types that are stored in the session must also be Codable.</li>\n</ul>\n<hr>\n<h2 id=\"http-basic-authentication\"><a href=\"#http-basic-authentication\" aria-label=\"http basic authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTP Basic Authentication</h2>\n<p>We have also added an implemention of type-safe HTTP Basic authentication in Kitura-CredentialsHTTP. HTTP Basic authentication transmits credentials in an “Authorization” header as base64 encoded user ID/password pairs. Kitura also allows you to send the username and password in the URL as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://username:password@www.example.com/</code></pre></div>\n<p>Note: some web browsers disable this for security reasons.</p>\n<h3 id=\"raw-http-basic-authentication\"><a href=\"#raw-http-basic-authentication\" aria-label=\"raw http basic authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Raw HTTP Basic authentication:</h3>\n<p>In raw routing, you could implement HTTP basic code as follows:</p>\n<p>Initialize the basicCredentials:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"qwerasdf\"</span><span class=\"token punctuation\">]</span>\n \n<span class=\"token keyword\">let</span> basicCredentials <span class=\"token operator\">=</span> <span class=\"token function\">CredentialsHTTPBasic</span><span class=\"token punctuation\">(</span>verifyPassword<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> callback <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> storedPassword <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>userId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> storedPassword <span class=\"token operator\">==</span> password <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">UserProfile</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> userId<span class=\"token punctuation\">,</span> displayName<span class=\"token punctuation\">:</span> userId<span class=\"token punctuation\">,</span> provider<span class=\"token punctuation\">:</span> <span class=\"token string\">\"HTTPBasic\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Note: This is a simplified example. In practice, passwords would not be stored in plain text.</p>\n<p>Register the middleware on the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">credentials<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">:</span> basicCredentials<span class=\"token punctuation\">)</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Interact with the credentials within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> profile <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>userProfile <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> \n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"type-safe-http-basic-authentication\"><a href=\"#type-safe-http-basic-authentication\" aria-label=\"type safe http basic authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type-safe HTTP Basic authentication:</h3>\n<p>Type-safe middleware makes this simpler and safer. We create a new type conforming to TypeSafeHTTPBasic:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeHTTPBasic</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">MyBasicAuth</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mary\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"qwerasdf\"</span><span class=\"token punctuation\">]</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">verifyPassword</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">MyBasicAuth</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> storedPassword <span class=\"token operator\">=</span> users<span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> storedPassword <span class=\"token operator\">==</span> password <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyBasicAuth</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We interact with the credentials within the route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/profile\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">MyBasicAuth</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n   <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The route will now only be invoked if authentication has been successful. The handler is passed a MyBasicAuth instance with the id field initialized appropriately, as well as any additional user-defined fields, instead of a generic [String: Any] dictionary.</p>\n<p>A further benefit of this approach can be seen when combining HTTP basic authentication with Swift-Kuery-ORM for user persistence. Because MyBasicAuth is Codable, we can also make it conform to Model. Then you can initialize your user type by using id as a primary key to retrieve the instance from the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeHTTPBasic</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">let</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">MyBasicAuth</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> idColumnName <span class=\"token operator\">=</span> <span class=\"token string\">\"id\"</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">verifyPassword</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">MyBasicAuth</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> userProfile<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> userProfile <span class=\"token operator\">=</span> userProfile <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> password <span class=\"token operator\">==</span> userProfile<span class=\"token punctuation\">.</span>password <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span>\n                <span class=\"token punctuation\">}</span>   \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, we have implemented the verifyPassword function by retrieving a user’s profile from a database. A profile with an id matching the supplied username is retrieved. If no matching id is found, or if the supplied password does not match, the middleware fails. If a match is found, the ORM returns an instance of MyBasicAuth, which is then provided to the route handler.</p>","frontmatter":{"path":"/blogs/type-safe-middleware","title":"A new kind of Kitura middleware: type-safe and easy to use","author":"Andrew Lees","date":"2018-06-05"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}