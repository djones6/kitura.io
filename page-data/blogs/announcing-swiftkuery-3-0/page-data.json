{"componentChunkName":"component---src-templates-blogs-js","path":"/blogs/announcing-swiftkuery-3-0","webpackCompilationHash":"ce65eca4090760710b8f","result":{"data":{"blog":{"html":"<p>We have recently released version 3.0 of Swift-Kuery along with version 2.0 of Swift-Kuery-PostgreSQL, SwiftKueryMySQL and Swift-Kuery-SQLite. You can find a summary of the major changes below, for more detail on the changes please refer to the Swift-Kuery migration guide.</p>\n<h2 id=\"api-changes\"><a href=\"#api-changes\" aria-label=\"api changes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>API changes</h2>\n<p>The SwiftKuery API has had an overhaul and has been updated to be entirely asynchronous.</p>\n<p>You now pass callbacks to the API for establishing your connections and preparing statements in the same way as you do currently when executing your queries and transactions.</p>\n<p>The API for retrieving results from the databases has also been updated to be asynchronous in style and you now pass a callback into the asRows function. A new API forEach has been added to allow iteration of the result set.</p>\n<hr>\n<p>Asynchronous API behaviour</p>\n<p>Previously the SwiftKuery API, while largely asynchronous in style, had underlying behaviour which was synchronous. In the SwiftKuery 3.0 and plugin updates the behaviour of the API has been reimplemented to be fully asynchronous.</p>\n<p>With this change all code using the SwiftKuery API needs to be written in an asynchronous style. For example if you previously had code that did not nest API calls within the previous calls completion handler, such as the example below, you would now see undefined behaviour as both execute calls could run in parallel:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// BAD CODE</span>\n<span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> myTable<span class=\"token punctuation\">)</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">//Handle result</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> newQuery <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> otherTable<span class=\"token punctuation\">)</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> newQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">//Handle result</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For this to work in an asynchronous environment subsequent tasks must be chained in the preceding taskâ€™s completion handler, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// CORRECT CODE</span>\n<span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> myTable<span class=\"token punctuation\">)</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">//Handle result</span>\n    <span class=\"token keyword\">let</span> newQuery <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> otherTable<span class=\"token punctuation\">)</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> newQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n        <span class=\"token comment\">//Handle result</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"reuse-table-definitions\"><a href=\"#reuse-table-definitions\" aria-label=\"reuse table definitions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reuse table definitions</h2>\n<p>We have added the ability to specify a name for the table created from your structs. This will minimise duplication of code when wanting to use several tables with the same definition. For example the following could be used to represent both a Customer and an Employeee:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Table</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> forename <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"forename\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> surname <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"surname\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> address <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"address\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With the prior release you would need to define the same class twice naming it differently. Now you can simply name the table when you create it for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> customers <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"customers\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> employees <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"employees\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"mysql-8-support-and-linker-improvements\"><a href=\"#mysql-8-support-and-linker-improvements\" aria-label=\"mysql 8 support and linker improvements permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL 8 support and linker improvements</h2>\n<p>The update also adds support for MySQL version 8 and removes the requirements for specifying additional flags at build, test and run time on newer Swift releases.</p>\n<p>MySQL version 8 includes some changes in the databases header files that were incompatible with version 5. We have updated the SwiftMySQL plugin to abstract these differences meaning the code you write will work on MySQL versions prior to and post 8.</p>\n<p>We have also added pkg-config support so you no longer have to specify additional flags on your swift commands so long as you are running a MySQL release later than 5.5.</p>\n<hr>\n<h2 id=\"example-usage\"><a href=\"#example-usage\" aria-label=\"example usage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example usage</h2>\n<p>Below is a sample function that can be used in a Kitura route to retrieve data from a database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">grades</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> callback<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    connection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> result<span class=\"token punctuation\">.</span>success <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>asError <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: Unknown Error\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Build and execute your query here.</span>\n \n        <span class=\"token comment\">// First build query</span>\n        <span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">.</span>course<span class=\"token punctuation\">,</span> grades<span class=\"token punctuation\">.</span>grade<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> grades<span class=\"token punctuation\">)</span>\n \n        <span class=\"token comment\">// Execute query</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> resultSet <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>asResultSet <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>asError <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error executing query: Unknown Error\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error executing query: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> retString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">getColumnTitles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> titles<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> titles <span class=\"token operator\">=</span> titles <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching column titles: Unknown Error\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching column titles: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> title <span class=\"token keyword\">in</span> titles <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">//The column names of the result.</span>\n                    retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>title<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>toLength<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> withPad<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> startingAt<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n \n                resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> row<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n                    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> row <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// A null row means we have run out of results unless we encountered an error</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error fetching row: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token comment\">// No error so all rows are processed, make final callback passing result.</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>retString<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> row <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> value <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">let</span> valueStr <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">)</span>\n                            <span class=\"token keyword\">let</span> padStr <span class=\"token operator\">=</span> valueStr<span class=\"token punctuation\">.</span><span class=\"token function\">padding</span><span class=\"token punctuation\">(</span>toLength<span class=\"token punctuation\">:</span> <span class=\"token number\">35</span><span class=\"token punctuation\">,</span> withPad<span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> startingAt<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                            retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>padStr<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    retString<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When called you will see results that look similar to this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">course                             grade                              \nHow to build your first computer   99                                 \nHow to work at a rock quarry       71</code></pre></div>\n<p>The full example can be found in the Swift-Kuery-PostgreSQL GitHub repository within the Readme.md file.</p>\n<hr>\n<h2 id=\"future\"><a href=\"#future\" aria-label=\"future permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future</h2>\n<p>Now that Swift-Kuery is entirely asynchronous we are ready for the future of Swift. The new APIs should transition seamlessly to async/await, and it should also be possible to take advantage of the new database drivers being discussed in the Swift Server Working Group.</p>","frontmatter":{"path":"/blogs/announcing-swiftkuery-3-0","title":"Announcing SwiftKuery 3.0","author":"Matt Kilner","date":"2018-12-18"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}