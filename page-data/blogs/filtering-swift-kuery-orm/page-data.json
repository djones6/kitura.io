{"componentChunkName":"component---src-templates-blogs-js","path":"/blogs/filtering-swift-kuery-orm","webpackCompilationHash":"a23aaa782308d970cae7","result":{"data":{"blog":{"html":"<h2 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>In Kitura 2.4 we have made enhancements to Codable Query Parameters to support extra filtering. This includes the ability to filter using operators such as greater than, inclusive ranges and pagination through Codable Routing. We then took a further step and incorporated these capabilities into Swift-Kuery-ORM in order to filter results from database queries.</p>\n<hr>\n<h2 id=\"setting-up-swift-kuery-orm\"><a href=\"#setting-up-swift-kuery-orm\" aria-label=\"setting up swift kuery orm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting Up Swift-Kuery-ORM</h2>\n<p>In your Kitura application, follow the README to set up Swift-Kuery-ORM using PostgreSQL, MySQL or SQLite.</p>\n<ol>\n<li>\n<p>Create a Student type that implements Model:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token keyword\">let</span> grade<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Create the table in the database:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">try</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">createTableSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token keyword\">let</span> error <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Save a list of students:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> students <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">78.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">65.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">82.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">94.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n             </code></pre></div>\n</li>\n</ol>\n<p>for student in students {\nstudent.save { student, error in\nif let error = error {\nprint(\"Error:\", error)\n}\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">4. Find a list of students and print them:\n\n```swift\nStudent.findAll { students, error in\n  if let error = error {\n    print(&quot;Error:&quot;, error)    \n  }\n   \n  if let students = students {\n    students.forEach { print($0) }</code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">65</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Alex\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">82</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">94</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This would translate in Raw SQL to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT * FROM Students;</code></pre></div>\n<hr>\n<h2 id=\"using-query-parameters-with-swift-kuery-orm\"><a href=\"#using-query-parameters-with-swift-kuery-orm\" aria-label=\"using query parameters with swift kuery orm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Query Parameters with Swift-Kuery-ORM</h2>\n<p>The following types have been added to Kitura 2.4 to enhance filtering:</p>\n<ul>\n<li>GreaterThan &#x26; LowerThan</li>\n<li>GreaterThanOrEqual &#x26; LowerThanOrEqual</li>\n<li>InclusiveRange &#x26; ExclusiveRange</li>\n<li>Pagination</li>\n<li>Ordering</li>\n</ul>\n<p>Let’s suppose we want to filter over the name of the Student, the age being greater than a value and the grade being inside a range.</p>\n<ol>\n<li>\n<p>Let’s define our Query type that implements QueryParams:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Query</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">QueryParams</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">GreaterThan</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> grade<span class=\"token punctuation\">:</span> <span class=\"token builtin\">InclusiveRange</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Double</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n<li>\n<p>Create an instance of Query:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> query <span class=\"token operator\">=</span> <span class=\"token function\">Query</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token function\">GreaterThan</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token function\">InclusiveRange</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">:</span> <span class=\"token number\">76</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">:</span> <span class=\"token number\">88</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>Find the students matching the query and print them:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>matching<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> students<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>    \n  <span class=\"token punctuation\">}</span>\n   \n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> students <span class=\"token operator\">=</span> students <span class=\"token punctuation\">{</span>\n    students<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>$<span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mark\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">26</span><span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">:</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This would translate in Raw SQL to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT * FROM Students WHERE ((Students.name = &quot;Mark&quot;) AND (Students.age &gt; 23)) AND ((Students.grade &gt;= 76) AND (Students.grade &lt;= 88));</code></pre></div>\n<p>The URL would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?name=Mark&amp;age=23&amp;grade=76,88</code></pre></div>\n<p>Now, we want only the first 3 values and they have to be ordered descending by grade:</p>\n<ol>\n<li>\n<p>Let’s define our MyQuery type that implements QueryParams:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyQuery</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">QueryParams</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> pagination<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Pagination</span>\n<span class=\"token keyword\">let</span> order<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Ordering</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Create an instance of MyQuery:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> myQuery <span class=\"token operator\">=</span> <span class=\"token function\">MyQuery</span><span class=\"token punctuation\">(</span>pagination<span class=\"token punctuation\">:</span> <span class=\"token function\">Pagination</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> order<span class=\"token punctuation\">:</span> <span class=\"token function\">Ordering</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token function\">desc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"grade\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>Find the students matching the query and print them:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>matching<span class=\"token punctuation\">:</span> myQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> students<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error:\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>    \n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p>  if let students = students {\nstudents.forEach { print($0) }\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Output:\n\n```swift\nStudent(name: &quot;Mark&quot;, age: 24, grade: 94)\nStudent(name: &quot;Alex&quot;, age: 23, grade: 82)\nStudent(name: &quot;Mark&quot;, age: 26, grade: 78)</code></pre></div>\n<p>This would translate in Raw SQL to :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT * FROM Students ORDER BY Students.grade DESC LIMIT 3 OFFSET 0;</code></pre></div>\n<p>The URL would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">?pagination=0,3&amp;order=desc(grade)</code></pre></div>\n<hr>\n<h2 id=\"working-with-codable-routing-in-kitura\"><a href=\"#working-with-codable-routing-in-kitura\" aria-label=\"working with codable routing in kitura permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Codable Routing in Kitura</h2>\n<p>Swift-Kuery-ORM really shines when used with Kitura, in particular because the ORM API has been aligned with Kitura’s Codable Routing APIs, allowing the completion handlers from the Codable Routes to be passed directly into the ORM calls. This means that no additional code needs to be written.</p>\n<ol>\n<li>Create a handler that retrieves the students and register it with the Router for GET requests on /students:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @<span class=\"token function\">escaping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Student</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n \nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> getStudents<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This has implemented the following URI: GET: /students.</p>\n<ol start=\"2\">\n<li>Create a handler that saves the students, and register it with the Router for POST requests on /students:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">saveStudents</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Student</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    student<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n  \nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/students\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> saveStudents<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This has implemented the following URI: POST: /students.</p>\n<ol start=\"3\">\n<li>Now let’s add filtering to the GET route by updating the getStudents handler to also accept your type that implements QueryParams as an additional parameter:\nNote: This is using the Query struct from earlier:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">getStudents</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Query</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @<span class=\"token function\">escaping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Student</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span>matching<span class=\"token punctuation\">:</span> query<span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This now implements a completely type-safe implementation of both the data handling, and the URL encoded query parameters for the following URI:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET:  /users?name=&lt;String&gt;&amp;age=&lt;Int&gt;&amp;grade=&lt;Int&gt;,&lt;Int&gt;</code></pre></div>\n<p>Note: that the type Query is set to optional. This means that the following URI is also supported:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET:  /users</code></pre></div>\n<p>If you want to include support for optional (non-required) query parameters, you just need to mark them as optional in your declared Swift type, eg: InclusiveRange?</p>\n<p>We have increased the capabilities of Swift-Kuery-ORM and carefully aligned it with Kitura to make persistence as easy as possible whilst maintaining type safety.</p>\n<hr>\n<h2 id=\"future\"><a href=\"#future\" aria-label=\"future permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future</h2>\n<p>The next features we are looking to integrate in Swift-Kuery-ORM, we believe will truly enhance its usage and provide essential functionalities. The following are just some of them:</p>\n<ul>\n<li>Migrations – the ability to apply incremental and reversible schema changes to the database.</li>\n<li>Relations between models – such as nested Models:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">School</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">Student</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Model</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">let</span> age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token keyword\">let</span> grade<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span>\n  <span class=\"token keyword\">let</span> school<span class=\"token punctuation\">:</span> <span class=\"token builtin\">School</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Support for NoSQL Databases such as Redis, MongoDB and CouchDB.</li>\n<li>Control over data types and sizes</li>\n</ul>","frontmatter":{"path":"/blogs/filtering-swift-kuery-orm","title":"Filtering in Swift-Kuery-ORM","author":"Enrique Lacal","date":"2018-06-08"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}