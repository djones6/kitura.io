{"componentChunkName":"component---src-templates-blogs-js","path":"/blogs/kitura-custom-encoders-and-decoders","webpackCompilationHash":"a23aaa782308d970cae7","result":{"data":{"blog":{"html":"<p>Codable routing allows you to quickly build REST APIs that work directly with concrete Swift types. Kitura achieves this by using the Codable protocol to encode and decode the body of HTTP requests. In Kitura 2.5, we have added the ability to customize the JSON encoders and decoders used by your router. Furthermore, you can add your own custom encoders and decoders. This allows your routes to handle other data serializations if you want, such as YAML, XML and MessagePack.</p>\n<h2 id=\"bodyencoder-and-bodydecoder\"><a href=\"#bodyencoder-and-bodydecoder\" aria-label=\"bodyencoder and bodydecoder permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BodyEncoder and BodyDecoder</h2>\n<p>We’ve added two new protocols called BodyEncoder and BodyDecoder that encapsulate the ability to change Codable types to and from Data.</p>\n<p>A class that conforms to BodyEncoder must be able to encode an Encodable type into Data:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">BodyEncoder</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> encode<span class=\"token operator\">&lt;</span>T <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Encodable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> value<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Data</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A class that conforms to BodyDecoder must be able to decode data into a Decodable type:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token builtin\">BodyDecoder</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">AnyObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> decode<span class=\"token operator\">&lt;</span>T <span class=\"token punctuation\">:</span> <span class=\"token builtin\">Decodable</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> type<span class=\"token punctuation\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">,</span> from data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Data</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> T\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Kitura extends JSONEncoder/JSONDecoder as well as QueryEncoder/QueryDecoder to conform to BodyEncoder/BodyDecoder. As a result, these coders are usable out of the box. Other encoders/decoders can be made to conform to this protocol so that the Kitura router can use them.</p>\n<hr>\n<h2 id=\"mediatype\"><a href=\"#mediatype\" aria-label=\"mediatype permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MediaType</h2>\n<p>The media type (formerly known as MIME type) is a two-part identifier that is separated by a forwards slash (e.g. “text/plain”). We have added a MediaType struct to Kitura that represents media type. This is used for selecting an encoder or decoder based on the media type identified in the Accepts or Content-Type HTTP headers. You can initialize a MediaType in three ways:</p>\n<ul>\n<li>\n<p>From a raw media type string</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token function\">MediaType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>By providing the type and sub type</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token function\">MediaType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">,</span> subtype<span class=\"token punctuation\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>Using a static helper initializer for certain popular media types</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> json <span class=\"token operator\">=</span> <span class=\"token builtin\">MediaType</span><span class=\"token punctuation\">.</span>json</code></pre></div>\n</li>\n</ul>\n<hr>\n<h2 id=\"custom-encoders-and-decoders-on-the-router\"><a href=\"#custom-encoders-and-decoders-on-the-router\" aria-label=\"custom encoders and decoders on the router permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Encoders and Decoders on the Router</h2>\n<p>From Kitura 2.5, the Router class has two extra properties: dictionaries called encoders and decoders.</p>\n<p>The encoders dictionary maps MediaType keys to closures for generating a BodyEncoder. On initialization, the dictionary includes a JSONEncoder() generator for “application/json”.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> encoders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">MediaType</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">BodyEncoder</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>You can send a Codable object from a route either by calling send(_ obj: T) from a RouterResponse or by using a Codable route. When this happens the Router will select the correct encoder based on the Accepts header of the Request. If the request doesn’t have an Accepts header or it doesn’t include any MediaTypes from your dictionary, the router’s defaultResponseMediaType will determine the encoder.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> defaultResponseMediaType<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MediaType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>json</code></pre></div>\n<p>The decoders dictionary maps MediaType keys to closures for generating a BodyDecoder. On initialization, the dictionary includes a JSONDecoder() generator for “application/json” and a QueryDecoder() generator for “application/x-www-form-urlencoded”.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> decoders<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">MediaType</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">BodyDecoder</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>urlEncoded<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">QueryDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>You can read a Codable object in a route either by calling read(as type: T.Type) from a RouterRequest or by using a Codable route. When this happens the Router will select the correct decoder based on the Content-Type header of the request.</p>\n<p>You can add custom encoders and decoders to your router by adding BodyEncoders/BodyDecoders to these dictionary with the MediaType you would like them to encode/decode. You can also replace the existing JSONEncoder and JSONDecoder generators to customize how your Kitura router handles JSON.</p>\n<hr>\n<h2 id=\"adding-other-data-serializations\"><a href=\"#adding-other-data-serializations\" aria-label=\"adding other data serializations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding other data serializations</h2>\n<p>The following data serialization formats already have existing Swift packages which implement them using Codable:</p>\n<ul>\n<li>YAML</li>\n<li>XML</li>\n<li>BSON</li>\n<li>Property Lists</li>\n<li>MessagePack</li>\n</ul>\n<p>To use one of these custom encoders and decoders:</p>\n<ol>\n<li>Follow the corresponding link above.</li>\n<li>Import the repository to your Kitura project.</li>\n<li>Extend their Encoder/Decoder Class to conform to BodyEncoder/Decoder.</li>\n<li>Add the encoder/decoder and its MediaType to your encoder and decoder dictionary</li>\n</ol>\n<hr>\n<h2 id=\"example-customizing-the-json-encoder\"><a href=\"#example-customizing-the-json-encoder\" aria-label=\"example customizing the json encoder permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example: Customizing the JSON encoder</h2>\n<p>JSON is the most common data serialization technique and Kitura uses it by default for its Codable routes. The JSONEncoder class includes options to customize its encoding strategy. In this example we will show you how to set your Kitura router to send pretty printed JSON from a Codable route.</p>\n<ol>\n<li>In the terminal, using the Kitura command-line interface, generate a basic Kitura server:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir ~/customCoders\ncd ~/customCoders\nkitura init\nopen customCoders.xcodeproj/</code></pre></div>\n<ol start=\"2\">\n<li>Open Sources > Application > Application.swift</li>\n<li>Add a Hello struct after the App class:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Hello</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> hello<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> from<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li>Construct a Codable route:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Hello</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> hello <span class=\"token operator\">=</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"5\">\n<li>In the top left corner of Xcode you should see a small toolbox icon with the text “customCoders-Package” next to it. Click this icon and then click “customCoders” from the dropdown menu.</li>\n<li>Go to <a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></li>\n</ol>\n<p>You will see the hello message printed as standard JSON.</p>\n<ol start=\"7\">\n<li>After initializeMetrics(router: router) create your custom JSONEncoder() generator:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> jsonEncoderGenerator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">BodyEncoder</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> encoder <span class=\"token operator\">=</span> <span class=\"token function\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    encoder<span class=\"token punctuation\">.</span>outputFormatting <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>prettyPrinted\n    <span class=\"token keyword\">return</span> encoder\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"8\">\n<li>replace the router’s JSONEncoder with your new one:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span>encoders<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> jsonEncoderGenerator</code></pre></div>\n<ol start=\"9\">\n<li>Restart your project and go to <a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a></li>\n</ol>\n<p>The hello message will now be pretty printed JSON.</p>","frontmatter":{"path":"/blogs/kitura-custom-encoders-and-decoders","title":"Pluggable JSON encoders in Kitura 2.5","author":"Andrew Lees","date":"2018-09-01"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}